internal fun fatalError(msg: String);
internal fun abort();
internal fun exit(status: Int);
fun unreachable() {
  fatalError("unreachable code");
}

fun unimplemented() {
  fatalError("not yet implemented");
}

internal fun print(text: String);
internal fun println(text: String);
internal fun addressOf(object: Object) -> Long;
internal fun assert(val: Bool);
internal fun debug();
internal fun argc() -> Int;
internal fun argv(idx: Int) -> String;
internal fun forceCollect();
internal fun forceMinorCollect();

internal fun call(fct: String);
internal fun throwFromNative(val: Bool) throws;
internal fun throwFromNativeButNotThrows(val: Bool);

internal fun timestamp() -> Long;

internal class Bool {
  internal fun toInt() -> Int;
  fun toString() -> String {
    if self {
      return "true";
    } else {
      return "false";
    }
  }

  internal fun equals(rhs: Bool) -> Bool;
  internal fun not() -> Bool;
}

internal class Byte {
  internal fun toInt() -> Int;
  internal fun toLong() -> Long;
  internal fun toString() -> String;

  internal fun equals(rhs: Byte) -> Bool;
  internal fun compareTo(rhs: Byte) -> Int;
}

internal class Char {
  internal fun toInt() -> Int;
  internal fun toLong() -> Long;
  internal fun toString() -> String;

  internal fun equals(rhs: Char) -> Bool;
  internal fun compareTo(rhs: Char) -> Int;

  fun encodeUtf8(bytes: Array<Byte>, offset: Int) {
    let val = self.toInt();

    if val < 0x80 {
      bytes[offset] = val.toByte();
    } else if val < 0x800 {
      bytes[offset] = (0xC0 | ((val >> 6) & 0x1F)).toByte();
      bytes[offset+1] = (0x80 | (val & 0x3F)).toByte();
    } else if val < 0x10000 {
      bytes[offset] = (0xE0 | ((val >> 12) & 0x0F)).toByte();
      bytes[offset+1] = (0x80 | ((val >> 6) & 0x3F)).toByte();
      bytes[offset+2] = (0x80 | (val & 0x3F)).toByte();
    } else {
      bytes[offset] = (0xF0 | ((val >> 18) & 0x07)).toByte();
      bytes[offset+1] = (0x80 | ((val >> 12) & 0x3F)).toByte();
      bytes[offset+2] = (0x80 | ((val >> 6) & 0x3F)).toByte();
      bytes[offset+3] = (0x80 | (val & 0x3F)).toByte();
    }
  }

  fun lenUtf8() -> Int {
    let val = self.toInt();

    if val < 0x80 {
      return 1;
    } else if val < 0x800 {
      return 2;
    } else if val < 0x10000 {
      return 3;
    } else {
      return 4;
    }
  }
}

internal class Int {
  internal fun toByte() -> Byte;
  fun toChar() throws -> Char {
    if self >= 0 && self <= 0x10FFFF && (self < 0xD800 || self > 0xDFFF) {
      return self.toCharUnchecked();
    } else {
      throw "invalid code point";
    }
  }
  internal fun toCharUnchecked() -> Char;
  internal fun toLong() -> Long;
  internal fun toString() -> String;

  internal fun toFloat() -> Float;
  internal fun toDouble() -> Double;

  internal fun asFloat() -> Float;

  internal fun equals(rhs: Int) -> Bool;
  internal fun compareTo(rhs: Int) -> Int;

  internal fun plus(rhs: Int) -> Int;
  internal fun minus(rhs: Int) -> Int;
  internal fun times(rhs: Int) -> Int;
  internal fun div(rhs: Int) -> Int;
  internal fun mod(rhs: Int) -> Int;

  internal fun bitwiseOr(rhs: Int) -> Int;
  internal fun bitwiseAnd(rhs: Int) -> Int;
  internal fun bitwiseXor(rhs: Int) -> Int;

  internal fun shiftLeft(rhs: Int) -> Int;
  internal fun shiftRight(rhs: Int) -> Int;
  internal fun unsignedShiftRight(rhs: Int) -> Int;

  internal fun unaryPlus() -> Int;
  internal fun unaryMinus() -> Int;
  internal fun not() -> Int;

  fun abs() -> Int {
    if self >= 0 {
      return self;
    } else {
      return -self;
    }
  }

  static fun min(lhs: Int, rhs: Int) -> Int {
    if lhs < rhs {
      return lhs;
    } else {
      return rhs;
    }
  }

  static fun max(lhs: Int, rhs: Int) -> Int {
    if lhs < rhs {
      return rhs;
    } else {
      return lhs;
    }
  }

  static fun max_value() -> Int {
    return 2147483647;
  }

  static fun min_value() -> Int {
    return -2147483648;
  }
}

internal class Long {
  internal fun toByte() -> Byte;
  fun toChar() throws -> Char {
    if self >= 0L && self <= 0x10FFFFL && (self < 0xD800L || self > 0xDFFFL) {
      return self.toCharUnchecked();
    } else {
      throw "invalid code point";
    }
  }
  internal fun toCharUnchecked() -> Char;
  internal fun toInt() -> Int;
  internal fun toString() -> String;

  internal fun toFloat() -> Float;
  internal fun toDouble() -> Double;

  internal fun asDouble() -> Double;

  internal fun equals(rhs: Long) -> Bool;
  internal fun compareTo(rhs: Long) -> Int;

  internal fun plus(rhs: Long) -> Long;
  internal fun minus(rhs: Long) -> Long;
  internal fun times(rhs: Long) -> Long;
  internal fun div(rhs: Long) -> Long;
  internal fun mod(rhs: Long) -> Long;

  internal fun bitwiseOr(rhs: Long) -> Long;
  internal fun bitwiseAnd(rhs: Long) -> Long;
  internal fun bitwiseXor(rhs: Long) -> Long;

  internal fun shiftLeft(rhs: Long) -> Long;
  internal fun shiftRight(rhs: Long) -> Long;
  internal fun unsignedShiftRight(rhs: Long) -> Long;

  internal fun unaryPlus() -> Long;
  internal fun unaryMinus() -> Long;
  internal fun not() -> Long;

  static fun max_value() -> Long {
    return 9223372036854775807L;
  }

  static fun min_value() -> Long {
    return -9223372036854775808L;
  }

  static fun min(lhs: Long, rhs: Long) -> Long {
    if lhs < rhs {
      return lhs;
    } else {
      return rhs;
    }
  }

  static fun max(lhs: Long, rhs: Long) -> Long {
    if lhs < rhs {
      return rhs;
    } else {
      return lhs;
    }
  }
}

internal class Float {
  internal fun toInt() -> Int;
  internal fun toLong() -> Long;
  internal fun toDouble() -> Double;
  internal fun toString() -> String;

  internal fun asInt() -> Int;

  internal fun equals(rhs: Float) -> Bool;
  internal fun compareTo(rhs: Float) -> Int;

  internal fun plus(rhs: Float) -> Float;
  internal fun minus(rhs: Float) -> Float;
  internal fun times(rhs: Float) -> Float;
  internal fun div(rhs: Float) -> Float;

  internal fun unaryPlus() -> Float;
  internal fun unaryMinus() -> Float;

  internal fun isNan() -> Bool;
  internal fun sqrt() -> Float;
}

internal class Double {
  internal fun toInt() -> Int;
  internal fun toLong() -> Long;
  internal fun toFloat() -> Float;
  internal fun toString() -> String;

  internal fun asLong() -> Long;

  internal fun equals(rhs: Double) -> Bool;
  internal fun compareTo(rhs: Double) -> Int;

  internal fun plus(rhs: Double) -> Double;
  internal fun minus(rhs: Double) -> Double;
  internal fun times(rhs: Double) -> Double;
  internal fun div(rhs: Double) -> Double;

  internal fun unaryPlus() -> Double;
  internal fun unaryMinus() -> Double;

  internal fun isNan() -> Bool;
  internal fun sqrt() -> Double;
}

class Object

internal class Array<T> {
  init() {}
  init(len: Int) {}
  init(len: Int, value: T) {
    var i = 0;

    while i < len {
      self[i] = value;
      i = i + 1;
    }
  }

  internal fun len() -> Int;
  internal fun get(idx: Int) -> T;
  internal fun set(idx: Int, val: T);

  fun contains(value: T /* : Equals*/) -> Bool {
    var i = 0;

    while i < self.len() {
      let x = self[i];
      if /*x.equals(value) ||*/ x === value {
        return true;
      }
      i = i + 1;
    }

    return false;
  }

  fun has(value: T) -> Bool {
    var i = 0;

    while i < self.len() {
      if self[i] === value {
        return true;
      }
      i = i + 1;
    }

    return false;
  }
}

fun arraycopy<T>(src: Array<T>, srcPos: Int, dest: Array<T>, destPos: Int, len: Int) {
  var i = 0;

  while i < len {
    dest[destPos+i] = src[srcPos+i];
    i = i + 1;
  }
}

trait Equals {
  fun equals(other: Self) -> Bool;
}

impl Equals for Int {
  internal fun equals(other: Int) -> Bool;
}

trait Comparable {
  fun compareTo(other: Self) -> Int;
}

impl Comparable for Int {
  internal fun compareTo(other: Int) -> Int;
}

fun bubbleSort<T: Comparable>(array: Array<T>) {
  let len = array.len();
  var swapped = true;

  while swapped {
    swapped = false;

    var i = 1;

    while i < len {
      if array[i-1].compareTo(array[i]) > 0 {
        let temp = array[i-1];
        array[i-1] = array[i];
        array[i] = temp;

        swapped = true;
      }

      i = i + 1;
    }
  }

}

internal fun defaultValue<T>() -> T;

internal fun loadFunction(name: String) -> Long;
internal fun call0(fct: Long) -> Long;
internal fun call1(fct: Long, arg0: Long) -> Long;
internal fun call2(fct: Long, arg0: Long, arg1: Long) -> Long;
internal fun call3(fct: Long, arg0: Long, arg1: Long, arg2: Long) -> Long;

internal fun native_malloc(size: Long) -> Long;
internal fun native_free(address: Long);
internal fun set_uint8(address: Long, val: Byte);

fun native_string(val: String) -> Long {
  var i = 0;
  let len = val.len();

  let ptr = native_malloc(len.toLong()+1L);

  while i < len {
    set_uint8(ptr+i.toLong(), val.getByte(i));
    i = i + 1;
  }

  set_uint8(ptr+len.toLong(), 0Y);

  return ptr;
}

fun getpid() -> Int {
  let fct = loadFunction("getpid");
  return call0(fct).toInt();
}

fun getppid() -> Int {
  let fct = loadFunction("getppid");
  return call0(fct).toInt();
}

internal fun sleep(seconds: Int);

class Exception {
  var msg: String = nil;
  var backtrace: Array<Int> = nil;
  var elements: Array<StackTraceElement> = nil;

  init(msg: String) {
    self.retrieveStackTrace();
    self.msg = msg;
  }

  init() {
    self.retrieveStackTrace();
  }

  fun getStackTrace() -> Array<StackTraceElement> {
    if self.elements !== nil {
      return self.elements;
    }

    if self.backtrace === nil {
      self.elements = Array::<StackTraceElement>();
      return self.elements;
    }

    var i = 0;
    let len = self.backtrace.len() / 2;
    self.elements = Array::<StackTraceElement>(len);

    while i < len {
      self.elements[i] = self.getStackTraceElement(i);
      i = i + 1;
    }

    return self.elements;
  }

  fun printStackTrace() {
    if self.msg !== nil {
      println("Exception: " + self.msg);
    } else {
      println("Exception");
    }

    let x = self.getStackTrace();

    var i = 0;

    while i < x.len() {
      println(i.toString() + ": " + x[i].toString());
      i = i + 1;
    }
  }

  internal fun retrieveStackTrace();
  internal fun getStackTraceElement(idx: Int) -> StackTraceElement;
}

class StackTraceElement(let name: String, let line: Int) {
  fun toString() -> String {
    return self.name + ": " + self.line.toString();
  }
}

class IntRange(let lower: Int, let upper: Int) {
  fun makeIterator() -> IntRangeIter {
    return IntRangeIter(self);
  }
}

fun range(lower: Int, upper: Int) -> IntRange {
  return IntRange(lower, upper);
}

trait Iterator {
  fun hasNext() -> Bool;
  fun next() -> Int;
}

class IntRangeIter(let range: IntRange) {
  var value: Int = range.lower;
}

impl Iterator for IntRangeIter {
  fun hasNext() -> Bool {
    return self.value < self.range.upper;
  }

  fun next() -> Int {
    let cur = self.value;
    self.value = cur + 1;
    return cur;
  }
}

open abstract class Thread {
  internal fun start();

  abstract fun run();
}

