@pub class Stacktrace() {
  var backtrace: Option[Array[Int32]] = None[Array[Int32]];
  var elements: Option[Array[StacktraceElement]] = None[Array[StacktraceElement]];

  self.retrieveStacktrace();

  @pub fun getStacktrace(): Array[StacktraceElement] {
    if self.elements.isSome() {
      return self.elements.getOrPanic();
    }

    if self.backtrace.isNone() {
      let elements = Array[StacktraceElement]::empty();
      self.elements = Some[Array[StacktraceElement]](elements);
      return elements;
    }

    let backtraceLength = self.backtrace.getOrPanic().size();
    var i = 0L;
    let len = backtraceLength / 2L;
    let elements = Array[StacktraceElement]::unsafeNew(len);

    while i < len {
      elements.set(i, self.getStacktraceElement(i));
      i = i + 1L;
    }

    self.elements = Some[Array[StacktraceElement]](elements);
    return elements;
  }

  @pub fun printStacktrace() {
    let x = self.getStacktrace();
    var i = 0L;

    while i < x.size() {
      println(i.toString() + ": " + x.get(i).toString());
      i = i + 1L;
    }
  }

  @internal fun retrieveStacktrace();
  @internal fun getStacktraceElement(idx: Int64): StacktraceElement;
}

class StacktraceElement(let name: String, let line: Int32) {
  fun toString(): String = "${self.name}: ${self.line}";
}