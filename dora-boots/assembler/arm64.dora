use package::assembler::AssemblerBuffer;
use package::assembler::Label;
use package::assembler::MachineCode;
use package::assembler::Register;
use package::assembler::assertAsm32;
use package::assembler::assertAsmEnd;

let R0: Register = Register(0i32);
let R1: Register = Register(1i32);
let R2: Register = Register(2i32);
let R3: Register = Register(3i32);
let R4: Register = Register(4i32);
let R5: Register = Register(5i32);
let R6: Register = Register(6i32);
let R7: Register = Register(7i32);
let R8: Register = Register(8i32);
let R9: Register = Register(9i32);
let R10: Register = Register(10i32);
let R11: Register = Register(11i32);
let R12: Register = Register(12i32);
let R13: Register = Register(13i32);
let R14: Register = Register(14i32);
let R15: Register = Register(15i32);

let R16: Register = Register(16i32);
let R17: Register = Register(17i32);
let R18: Register = Register(18i32);
let R19: Register = Register(19i32);
let R20: Register = Register(20i32);
let R21: Register = Register(21i32);
let R22: Register = Register(22i32);
let R23: Register = Register(23i32);
let R24: Register = Register(24i32);
let R25: Register = Register(25i32);
let R26: Register = Register(26i32);
let R27: Register = Register(27i32);
let R28: Register = Register(28i32);
let R29: Register = Register(29i32);
let R30: Register = Register(30i32);

let REG_ZERO: Register = Register(32i32);
let REG_SP: Register = Register(33i32);

let REG_FP: Register = R29;
let REG_LR: Register = R30;

struct NeonRegister(value: Int32)

impl NeonRegister {
    fun encoding(): Int32 {
        self.value
    }
}

let F0: NeonRegister = NeonRegister(0i32);
let F1: NeonRegister = NeonRegister(1i32);
let F2: NeonRegister = NeonRegister(2i32);
let F3: NeonRegister = NeonRegister(3i32);
let F4: NeonRegister = NeonRegister(4i32);
let F5: NeonRegister = NeonRegister(5i32);
let F6: NeonRegister = NeonRegister(6i32);
let F7: NeonRegister = NeonRegister(7i32);
let F8: NeonRegister = NeonRegister(8i32);
let F9: NeonRegister = NeonRegister(9i32);
let F10: NeonRegister = NeonRegister(10i32);
let F11: NeonRegister = NeonRegister(11i32);
let F12: NeonRegister = NeonRegister(12i32);
let F13: NeonRegister = NeonRegister(13i32);
let F14: NeonRegister = NeonRegister(14i32);
let F15: NeonRegister = NeonRegister(15i32);

let F16: NeonRegister = NeonRegister(16i32);
let F17: NeonRegister = NeonRegister(17i32);
let F18: NeonRegister = NeonRegister(18i32);
let F19: NeonRegister = NeonRegister(19i32);
let F20: NeonRegister = NeonRegister(20i32);
let F21: NeonRegister = NeonRegister(21i32);
let F22: NeonRegister = NeonRegister(22i32);
let F23: NeonRegister = NeonRegister(23i32);
let F24: NeonRegister = NeonRegister(24i32);
let F25: NeonRegister = NeonRegister(25i32);
let F26: NeonRegister = NeonRegister(26i32);
let F27: NeonRegister = NeonRegister(27i32);
let F28: NeonRegister = NeonRegister(28i32);
let F29: NeonRegister = NeonRegister(29i32);
let F30: NeonRegister = NeonRegister(30i32);
let F31: NeonRegister = NeonRegister(31i32);

class ForwardJump {
    offset: Int32,
    label: Label,
    kind: JumpKind
}

enum JumpKind {
    Unconditional,
    Conditional(CondCode),
    NonZero(Bool, Register),
}

enum CondCode {
    EQ, // equal
    NE, // not equal
    CS,
    HS, // carry set, unsigned higher or same
    CC,
    LO, // carry clear, unsigned lower
    MI, // negative
    PL, // positive or zero
    VS, // overflow
    VC, // no overflow
    HI, // unsigned higher
    LS, // unsigned lower or same
    GE, // signed greater than or equal
    LT, // signed less than
    GT, // signed greater than
    LE, // signed less than or equal
}

@pub class AssemblerArm64 {
    buffer: AssemblerBuffer,
}

impl AssemblerArm64 {
    @pub @static fun new(): AssemblerArm64 {
        AssemblerArm64(AssemblerBuffer::new())
    }

    @pub fun ret() {
        let inst = clsx::uncondBranchReg(0b0010i32, 0b11111i32, 0i32, REG_LR, 0i32);
        self.buffer.emitInt32(inst);
    }

    @pub fun retReg(rn: Register) {
        let inst = clsx::uncondBranchReg(0b0010i32, 0b11111i32, 0i32, rn, 0i32);
        self.buffer.emitInt32(inst);
    }

    @pub fun b(label: Label) {
        unreachable[()]();
    }

    @pub fun bl(label: Label) {
        unreachable[()]();
    }

    @pub fun blr(rn: Register) {
        let inst = clsx::uncondBranchReg(0b0001i32, 0b11111i32, 0i32, rn, 0i32);
        self.buffer.emitInt32(inst);
    }

    @pub fun br(rn: Register) {
        let inst = clsx::uncondBranchReg(0b0000i32, 0b11111i32, 0i32, rn, 0i32);
        self.buffer.emitInt32(inst);
    }

    @pub fun finalize(): Array[UInt8] {
        while self.buffer.size() % 16 != 0 {
            self.ret();
        }
        self.buffer.toArray()
    }

    fun finalizeTesting(): MachineCode {
        MachineCode::new(self.buffer.toArray())
    }
}

impl Register {
    fun isGpr(): Bool {
        self.value <= 30i32
    }

    fun isGprOrZero(): Bool {
        self.isGpr() || self == REG_ZERO
    }

    fun isGprOrSp(): Bool {
        self.isGpr() || self == REG_SP
    }

    fun encoding(): Int32 {
        assert(self.isGpr());
        self.value
    }

    fun encodingZero(): Int32 {
        assert(self.isGprOrZero());

        if self.isGpr() {
            self.value
        } else {
            31i32
        }
    }

    fun encodingSp(): Int32 {
        assert(self.isGprOrSp());

        if self.isGpr() {
            self.value
        } else {
            31i32
        }
    }
}

mod clsx {
    use package::assembler::Register;

    @pub fun uncondBranchImm(op: Int32, imm26: Int32): Int32 {
        assert(fitsUnsigned(op, 1i32));
        assert(fitsSigned(imm26, 26i32));

        0b101i32.shiftLeft(26i32) | op.shiftLeft(31i32) | (imm26 & 0x3FFFFFFi32)
    }

    @pub fun uncondBranchReg(opc: Int32, op2: Int32, op3: Int32, rn: Register, op4: Int32): Int32 {
        assert(fitsUnsigned(opc, 4i32));
        assert(fitsUnsigned(op2, 5i32));
        assert(fitsUnsigned(op3, 6i32));
        assert(rn.isGpr());
        assert(fitsUnsigned(op4, 5i32));

        0b1101011i32.shiftLeft(25i32) | opc.shiftLeft(21i32) | op2.shiftLeft(16i32) | op3.shiftLeft(10i32) | rn.encoding().shiftLeft(5i32) | op4
    }

    fun fitsBit(value: Int32): Bool {
        value >= 0i32 && value < 2i32
    }

    fun fitsSigned(value: Int32, bits: Int32): Bool {
        assert(bits > 0i32 && bits < 32i32);
        -(1i32.shiftLeft(bits - 1i32)) <= value && value < (1i32.shiftLeft(bits - 1i32))
    }

    fun fitsUnsigned(value: Int32, bits: Int32): Bool {
        assert(bits > 0i32 && bits < 32i32);
        value >= 0i32 && value < 1i32.shiftLeft(bits)
    }
}

@Test
fun testAsmRet() {
    let asm = AssemblerArm64::new();
    asm.ret();
    asm.retReg(R0);
    asm.retReg(R10);
    let buffer = asm.finalizeTesting();

    assertAsm32(buffer, 0xd65f03c0i32);
    assertAsm32(buffer, 0xd65f0000i32);
    assertAsm32(buffer, 0xd65f0140i32);
    assertAsmEnd(buffer);
}
