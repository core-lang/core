use std::Hash;
use std::Equals;
use std::BitVec;

use package::graph::ty::Type;
use package::bytecode::data::GlobalId;
use package::dominator::buildDominatorTree;

@pub mod builder;
@pub mod dump;
@pub mod reader;
@pub mod tests;
@pub mod ty;
@pub mod verifier;

@pub class Graph {
    entryBlock: Option[Block],
    @pub blocks: Vec[Option[Block]],
    postOrder: Vec[Block],
    nextBlockIdValue: Int32,
    nextInstIdValue: Int32,
}

impl Graph {
    @static @pub fun new(): Graph {
        Graph(
            None[Block],
            Vec[Option[Block]]::new(),
            Vec[Block]::new(),
            0i32,
            0i32,
        )
    }

    @pub fun addBlock(block: Block) {
        assert(block.graph.isNone());
        assert(block._id.isNone());

        block.graph = Some(self);
        block._id = Some(self.nextBlockId().value);
        self.blocks.push(Some[Block](block));
    }

    @pub fun getBlockWithId(id: Int32): Block {
        self.blocks(id.toInt64()).getOrPanic()
    }

    @pub fun setEntryBlock(block: Block) {
        self.entryBlock = Some(block);
    }

    @pub fun getEntryBlock(): Block {
        self.entryBlock.getOrPanic()
    }

    fun nextInstId(): Int32 {
        let id = self.nextInstIdValue;
        self.nextInstIdValue = id + 1i32;

        id
    }

    fun nextBlockId(): BlockId {
        let id = self.nextBlockIdValue;
        self.nextBlockIdValue = id + 1i32;

        BlockId(id)
    }

    @pub fun blockCount(): Int32 {
        self.nextBlockIdValue
    }

    @pub fun setPostOrder(postOrder: Vec[Block]) {
        self.postOrder = postOrder;

        for (idx, block) in self.postOrder.enumerate() {
            block.postOrderIdx = idx.toInt32();
        }
    }

    @pub fun rebuildDominatorTree() {
        // TODO: clear data of dominance and loop analysis
        self.buildDominatorTree();
    }

    @pub fun buildDominatorTree() {
        buildDominatorTree(self);
    }

    @pub fun insertionOrderIterator(): InsertionOrderIterator {
        InsertionOrderIterator::new(self.blocks.toArray())
    }

    @pub fun postOrderIterator(): PostOrderIterator {
        PostOrderIterator::new(self.postOrder.toArray())
    }

    @pub fun reversePostOrderIterator(): ReversePostOrderIterator {
        ReversePostOrderIterator::new(self.postOrder.toArray())
    }
}

class InsertionOrderIterator {
    blocks: Array[Option[Block]],
    idx: Int64,
} 

impl InsertionOrderIterator {
    @static fun new(blocks: Array[Option[Block]]): InsertionOrderIterator {
        InsertionOrderIterator(blocks, 0)
    }

    fun next(): Option[Block] {
        self.findNextBlock();

        if self.idx < self.blocks.size() {
            let block = self.blocks(self.idx).getOrPanic();
            self.idx = self.idx + 1i64;
            Some[Block](block)
        } else {
            None[Block]
        }
    }

    fun findNextBlock() {
        while self.idx < self.blocks.size() {
            let block = self.blocks(self.idx);

            if block.isSome() {
                break;
            }

            self.idx = self.idx + 1i64;
        }
    }
}

class PostOrderIterator {
    postOrder: Array[Block],
    idx: Int64,
}

impl PostOrderIterator {
    @static @pub fun new(postOrder: Array[Block]): PostOrderIterator {
        PostOrderIterator(postOrder, 0)
    }

    fun next(): Option[Block] {
        if self.idx < self.postOrder.size() {
            let block = self.postOrder(self.idx);
            self.idx = self.idx + 1i64;
            Some[Block](block)
        } else {
            None[Block]
        }
    }
}

class ReversePostOrderIterator {
    postOrder: Array[Block],
    idx: Int64,
}

impl ReversePostOrderIterator {
    @static @pub fun new(postOrder: Array[Block]): ReversePostOrderIterator {
        ReversePostOrderIterator(postOrder, postOrder.size() - 1)
    }

    fun next(): Option[Block] {
        if self.idx != -1 {
            let block = self.postOrder(self.idx);
            self.idx = self.idx - 1;
            Some[Block](block)
        } else {
            None[Block]
        }
    }
}

struct BlockId(value: Int32)

@pub class Block {
    _id: Option[Int32],
    phis: InstLinkedList,
    instructions: InstLinkedList,

    graph: Option[Graph],

    dominator: Option[Block],
    dominatedBlocks: Vec[Block],

    @pub predecessors: Vec[Edge],
    @pub successors: Vec[Edge],

    loopData: Option[LoopData],
    @pub postOrderIdx: Int32,
}

impl Block {
    @static @pub fun new(): Block {
        Block(
            None[Int32],
            InstLinkedList::new(),
            InstLinkedList::new(),
            None[Graph],
            None[Block],
            Vec[Block]::new(),
            Vec[Edge]::new(),
            Vec[Edge]::new(),
            None[LoopData],
            -1i32
        )
    }

    @pub fun id(): Int32 {
        self._id.getOrPanic()
    }

    @pub fun getGraph(): Graph {
        self.graph.getOrPanic()
    }

    @pub fun getDominator(): Option[Block] = self.dominator;

    @pub fun setDominator(block: Block) {
        self.dominator = Some(block);
    }

    @pub fun dominates(other: Block): Bool =
        if self == other {
            true
        } else {
            self.strictlyDominates(other)
        };

    @pub fun strictlyDominates(other: Block): Bool {
        let mut current = other.getDominator();

        while current.isSome() {
            if self === current.getOrPanic() { return true; }
            current = current.getOrPanic().getDominator();
        }

        false
    }

    @pub fun getDominatedBlocks(): Vec[Block] = self.dominatedBlocks;

    @pub fun addDominatedBlock(block: Block) {
        self.dominatedBlocks.push(block);
    }

    @pub fun addSuccessor(block: Block): Edge {
        let edge = Edge::new(self, block);
        self.successors.push(edge);
        block.predecessors.push(edge);
        edge
    }

    @pub fun appendPhi(phi: Inst): Inst {
        assert(phi.block.isNone() && phi._id.isNone());

        phi.block = Some(self);
        phi._id = Some(self.graph.getOrPanic().nextInstId());

        self.phis.appendInst(phi);
        phi.registerUses();

        phi
    }

    @pub fun appendInst(inst: Inst): Inst {
        assert(inst.block.isNone() && inst._id.isNone());

        inst.block = Some(self);
        inst._id = Some(self.graph.getOrPanic().nextInstId());

        self.instructions.appendInst(inst);
        inst.registerUses();

        inst
    }

    @pub fun addBackEdge(block: Block) {
        if self.loopData.isNone() {
            self.loopData = Some(LoopData::new(self));
        }
        self.loopData.getOrPanic().addBackEdge(block);
    }

    @pub fun isLoopHeader(): Bool {
        self.loopData.isSome() && self.loopData.getOrPanic().header === self
    }

    @pub fun getLoopData(): Option[LoopData] {
        self.loopData
    }

    @pub fun setLoopData(loop: LoopData) {
        self.loopData = Some(loop);
    }

    @pub fun clearLoopData() {
        self.loopData = None;
    }

    @pub fun isEntryBlock(): Bool {
        self.graph.getOrPanic().getEntryBlock() === self
    }

    @pub fun instructionsIterator(): InstIterator {
        InstIterator::new(self)
    }

    @pub fun reverseInstructionsIterator(): BackwardInstIterator {
        BackwardInstIterator::new(self)
    }

    @pub fun phisIterator(): PhiInstIterator {
        PhiInstIterator::new(self)
    }

    @pub fun firstInst(): Inst {
        self.instructions.firstInst()
    }

    @pub fun lastInst(): Inst {
        self.instructions.lastInst()
    }

    @pub fun removePhi(inst: Inst) {
        unimplemented();
    }
}

impl Hash for Block {
  fun hash(): Int32 = self.id().hash();
}

impl Equals for Block {
  fun equals(other: Block): Bool = self === other;
}

@pub class LoopData {
    header: Block,
    @pub backEdges: Vec[Block],
    blocks: BitVec,
}

impl LoopData {
    @pub @static fun new(header: Block): LoopData {
        LoopData(header, Vec[Block]::new(), BitVec::new())
    }

    @pub fun getHeader(): Block {
        self.header
    }

    @pub fun addBackEdge(block: Block) {
        self.backEdges.push(block);
    }

    @pub fun numberBackEdges(): Int32 {
        self.backEdges.size().toInt32()
    }

    @pub fun addBlock(block: Block) {
        self.blocks.insert(block.id().toInt64());
    }

    @pub fun containsBlock(block: Block): Bool {
        self.blocks.contains(block.id().toInt64())
    }

    @pub fun containsLoop(other: LoopData): Bool {
        self.containsBlock(other.header)
    }
}

@pub class Input {
    idx: Int32,
    value: Inst,
    usedBy: Inst,
    previousUse: Option[Input],
    nextUse: Option[Input],
}

impl Input {
    @pub @static fun new(idx: Int32, value: Inst, usedBy: Inst): Input {
        Input(
            idx,
            value,
            usedBy,
            None[Input],
            None[Input],
        )
    }

    @pub fun getIdx(): Int32 {
        self.idx
    }

    @pub fun getValue(): Inst {
        self.value
    }

    @pub fun getUsedBy(): Inst {
        self.usedBy
    }
}

@pub enum Op {
    NullConst,
    
    Int32Const,
    Int64Const,

    Float32Const,
    Float64Const,

    LoadGlobal,
    StoreGlobal,

    Undef,

    BoundsCheck,
    Goto,
    If,
    Return,

    Neg,
    Not,

    Add,
    Sub,
    Mul,
    Div,
    Mod, 
    And,
    Or,
    Xor,
    Shl,
    Shr,
    Sar,

    TestIdentity,
    Equal,
    NotEqual,
    Greater,
    GreaterOrEqual,
    Less,
    LessOrEqual,

    Phi,
    DivZeroCheck,
    ArrayGet,
    ArraySet,
    ArrayLength,

    FieldGet,
    FieldSet,
    Arg,
}

fun opName(op: Op): String {
    match op {
        Op::NullConst => "Const.Null",
        Op::Int32Const => "Const.Int32",
        Op::Int64Const => "Const.Int64",
        Op::Float32Const => "Const.Float32",
        Op::Float64Const => "Const.Float64",
        Op::LoadGlobal => "LoadGlobal",
        Op::StoreGlobal => "StoreGlobal",
        Op::Undef => "Undef",
        Op::BoundsCheck => "BoundsCheck",
        Op::Goto => "Goto",
        Op::If => "If",
        Op::Return => "Return",
        Op::Neg => "Neg",
        Op::Not => "Not",
        Op::Add => "Add",
        Op::Sub => "Sub",
        Op::Mul => "Mul",
        Op::Div => "Div",
        Op::Mod => "Mod",
        Op::And => "And",
        Op::Or => "Or",
        Op::Xor => "Xor",
        Op::Shl => "Shl",
        Op::Shr => "Shr",
        Op::Sar => "Sar",
        Op::TestIdentity => "TestIdentity",
        Op::Equal => "Equal",
        Op::NotEqual => "NotEqual",
        Op::Greater => "Greater",
        Op::GreaterOrEqual => "GreaterOrEqual",
        Op::Less => "Less",
        Op::LessOrEqual => "LessOrEqual",
        Op::Phi => "Phi",
        Op::DivZeroCheck => "DivZeroCheck",
        Op::ArrayGet => "ArrayGet",
        Op::ArraySet => "ArraySet",
        Op::ArrayLength => "ArrayLength",
        Op::FieldGet => "FieldGet",
        Op::FieldSet => "FieldSet",
        Op::Arg => "Arg",
    }
}

@pub class Inst {
    _id: Option[Int32],
    block: Option[Block],

    _op: Option[Op],

    aux: Int64,

    previous: Option[Inst],
    next: Option[Inst],

    ty: Type,

    useListHead: Option[Input],
    useListTail: Option[Input],

    inputs: Vec[Input],
    block1: Option[Block],
    block2: Option[Block],
}

impl Inst {
    @pub @static fun new(): Inst {
        Inst(
            None[Int32],
            None[Block],
            None[Op],
            0,
            None[Inst],
            None[Inst],
            Type::Unit,
            None[Input],
            None[Input],
            Vec[Input]::new(),
            None[Block],
            None[Block],
        )
    }

    @pub fun id(): Int32 {
        self._id.getOrPanic()
    }

    @pub fun op(): Op {
        self._op.getOrPanic()
    }

    @pub fun getBlock(): Block {
        self.block.getOrPanic()
    }

    @pub fun getInputs(): Vec[Input] {
        self.inputs
    }

    @pub fun isPhi(): Bool {
        self.op() == Op::Phi
    }

    @pub fun getType(): Type {
        return self.ty;
    }

    @pub fun addInput(inst: Inst) {
        let input = Input::new(self.inputs.size().toInt32(), inst, self);
        self.inputs.push(input);
    }

    @pub fun addUse(input: Input) {
        assert(input.value === self);

        if self.useListHead.isNone() {
            assert(self.useListTail.isNone());
            input.previousUse = None;
            input.nextUse = None;

            self.useListHead = Some(input);
            self.useListTail = Some(input);
        } else {
            assert(self.useListHead.isSome());
            assert(self.useListTail.isSome());

            self.useListTail.getOrPanic().nextUse = Some(input);

            input.previousUse = self.useListTail;
            input.nextUse = None;

            self.useListTail = Some(input);
        }
    }

    @pub fun remove() {
        assert(self.hasUses().not());
        assert(self.block.isSome());

        self.removeAsUser();
        let block = self.block.getOrPanic();

        if self.isPhi() {
            block.phis.removeInst(self);
        } else {
            block.instructions.removeInst(self);
        }

        self.block = None;
    }

    @pub fun registerUses() {
        for input in self.inputs {
            input.value.addUse(input);
        }
    }

    @pub fun removeAsUser() {
        for input in self.inputs {
            removeUse(input);
        }
    }

    @pub fun hasUses(): Bool {
        let result = self.useListHead.isSome();
        assert(result == self.useListTail.isSome());
        result
    }

    @pub fun replaceWith(replacement: Inst) {
        while self.useListHead.isSome() {
            let input = self.useListHead.getOrPanic();
            input.usedBy.replaceInput(replacement, input.idx);
        }
    }

    @pub fun replaceInput(replacement: Inst, idx: Int32) {
        let input = self.inputs(idx.toInt64());

        if input.value === replacement {
            return;
        }

        removeUse(input);
        input.value = replacement;
        replacement.addUse(input);
    }

    @pub fun users(): Array[Inst] {
        let data = Vec[Inst]::new();
        let mut current = self.useListHead;

        while current.isSome() {
            let cur = current.getOrPanic();
            data.push(cur.usedBy);
            current = cur.nextUse;
        }

        data.toArray()
    }

    @pub fun uses(): UseIterator {
        UseIterator::new(self)
    }

    @pub fun dominates(other: Inst): Bool {
        let sblock = self.block.getOrPanic();
        let oblock = other.block.getOrPanic();

        if sblock === oblock {
            let mut current = self.next;

            while current.isSome() {
                let currentInst = current.getOrPanic();

                if currentInst === other {
                    return true;
                }

                current = currentInst.next;
            }

            false
        } else {
            sblock.dominates(oblock)
        }
    }

    @pub fun isTerminator(): Bool {
        match self.op() {
            Op::Goto => true,
            Op::If => true,
            Op::Return => true,
            _ => false,
        }
    }

    @pub fun auxAsInt32(): Int32 {
        let op = self.op();

        assert(
            op == Op::Int32Const ||
            op == Op::LoadGlobal ||
            op == Op::StoreGlobal ||
            op == Op::Arg
        );
        self.aux.toInt32()
    }

    @pub fun auxAsInt64(): Int64 {
        assert(self.op() == Op::Int64Const);
        self.aux
    }

    @pub fun auxAsFloat32(): Float32 {
        assert(self.op() == Op::Float32Const);
        self.aux.toInt32().asFloat32()
    }

    @pub fun auxAsFloat64(): Float64 {
        assert(self.op() == Op::Float64Const);
        self.aux.asFloat64()
    }

    @pub fun getTargetBlock(): Block {
        assert(self.op() == Op::Goto);
        self.block1.getOrPanic()
    }

    @pub fun getTrueBlock(): Block {
        assert(self.op() == Op::If);
        self.block1.getOrPanic()
    }

    @pub fun getFalseBlock(): Block {
        assert(self.op() == Op::If);
        self.block2.getOrPanic()
    }

    @pub fun hasSideEffects(): Bool {
        match self.op() {
            Op::NullConst => false,
            Op::Int32Const => false,
            Op::Int64Const => false,
            Op::Float32Const => false,
            Op::Float64Const => false,
            Op::LoadGlobal => true,
            Op::StoreGlobal => true,
            Op::Undef => false,
            Op::BoundsCheck => true,
            Op::Goto => true,
            Op::If => true,
            Op::Return => true,
            Op::Neg => false,
            Op::Not => false,
            Op::Add => false,
            Op::Sub => false,
            Op::Mul => false,
            Op::Div => false,
            Op::Mod => false,
            Op::And => false,
            Op::Or => false,
            Op::Xor => false,
            Op::Shl => false,
            Op::Shr => false,
            Op::Sar => false,
            Op::TestIdentity => false,
            Op::Equal => false,
            Op::NotEqual => false,
            Op::Greater => false,
            Op::GreaterOrEqual => false,
            Op::Less => false,
            Op::LessOrEqual => false,
            Op::Phi => true,
            Op::DivZeroCheck => true,
            Op::ArrayGet => false,
            Op::ArraySet => true,
            Op::ArrayLength => false,
            Op::FieldGet => false,
            Op::FieldSet => true,
            Op::Arg => false,
        }
    }
}

class UseIterator {
    current: Option[Input],
}

impl UseIterator {
    @static fun new(inst: Inst): UseIterator {
        UseIterator(inst.useListHead)
    } 

    fun next(): Option[Input] {
        if self.current.isSome() {
            let input = self.current.getOrPanic();
            self.current = input.nextUse;
            Some[Input](input)
        } else {
            None[Input]
        }
    }
}

fun removeUse(input: Input) {
    let inst = input.value;

    if input.previousUse.isSome() {
        input.previousUse.getOrPanic().nextUse = input.nextUse;
    } else {
        inst.useListHead = input.nextUse;
    }

    if input.nextUse.isSome() {
        input.nextUse.getOrPanic().previousUse = input.previousUse;
    } else {
        inst.useListTail = input.previousUse;
    }

    assert(inst.useListHead.isSome() == inst.useListTail.isSome());

    input.previousUse = None;
    input.nextUse = None;
}

@pub fun createNullConst(value: UInt8): Inst {
    let inst = Inst::new();
    inst._op = Some(Op::NullConst);
    inst
}

@pub fun createInt32Const(value: Int32): Inst {
    let inst = Inst::new();
    inst._op = Some(Op::Int32Const);
    inst.aux = value.toInt64();
    inst
}

@pub fun createInt64Const(value: Int64): Inst {
    let inst = Inst::new();
    inst._op = Some(Op::Int64Const);
    inst.aux = value;
    inst
}

@pub fun createFloat32Const(value: Float32): Inst {
    let inst = Inst::new();
    inst._op = Some(Op::Float32Const);
    inst.aux = value.asInt32().toInt64();
    inst
}

@pub fun createFloat64Const(value: Float64): Inst {
    let inst = Inst::new();
    inst._op = Some(Op::Float64Const);
    inst.aux = value.asInt64();
    inst
}

@pub fun createLoadGlobalInst(ty: Type, global: GlobalId): Inst {
    let inst = Inst::new();
    inst._op = Some(Op::LoadGlobal);
    inst.ty = ty;
    inst.aux = global.value.toInt64();
    inst
}

@pub fun createStoreGlobalInst(ty: Type, global: GlobalId, value: Inst): Inst {
    let inst = Inst::new();
    inst._op = Some(Op::StoreGlobal);
    inst.aux = global.value.toInt64();
    inst.addInput(value);
    inst.ty = ty;
    inst
}


@pub fun createUnaryInst(op: Op, ty: Type, opnd: Inst): Inst {
    let inst = Inst::new();
    inst._op = Some(op);
    inst.addInput(opnd);
    inst.ty = ty;
    inst
}

@pub fun createBinaryInst(op: Op, ty: Type, lhs: Inst, rhs: Inst): Inst {
    let inst = Inst::new();
    inst._op = Some(op);
    inst.addInput(lhs);
    inst.addInput(rhs);
    inst.ty = ty;
    inst
}

@pub fun createTestInst(opcode: Op, ty: Type, lhs: Inst, rhs: Inst): Inst {
    let inst = Inst::new();
    inst._op = Some(opcode);
    inst.addInput(lhs);
    inst.addInput(rhs);
    inst.ty = ty;
    inst
}

@pub fun createUndefInst(): Inst {
    let inst = Inst::new();
    inst._op = Some(Op::Undef);
    inst
}

@pub fun createPhiInst(): Inst {
    let inst = Inst::new();
    inst._op = Some(Op::Phi);
    inst
}

@pub fun createBoundsCheck(index: Inst, length: Inst): Inst {
    let inst = Inst::new();
    inst._op = Some(Op::BoundsCheck);
    inst.addInput(index);
    inst.addInput(length);
    inst
}

@pub fun createDivZeroCheck(value: Inst): Inst {
    let inst = Inst::new();
    inst._op = Some(Op::DivZeroCheck);
    inst.addInput(value);
    inst
}

@pub fun createArrayGet(array: Inst, index: Inst, ty: Type): Inst {
    let inst = Inst::new();
    inst._op = Some(Op::ArrayGet);
    inst.ty = ty;
    inst.addInput(array);
    inst.addInput(index);
    inst
}

@pub fun createArraySet(array: Inst, index: Inst, value: Inst): Inst {
    let inst = Inst::new();
    inst._op = Some(Op::ArraySet);
    inst.addInput(array);
    inst.addInput(index);
    inst.addInput(value);
    inst
}

@pub fun createArrayLength(array: Inst): Inst {
    let inst = Inst::new();
    inst._op = Some(Op::ArrayLength);
    inst.addInput(array);
    inst
}

class FieldInfo {
    offset: Int32,
    volatile: Bool
}

@pub fun createFieldGet(obj: Inst, field: FieldInfo, ty: Type): Inst {
    let inst = Inst::new();
    inst._op = Some(Op::FieldGet);
    inst.ty = ty;
    inst.addInput(obj);
    inst
}

@pub fun createFieldSet(obj: Inst, field: FieldInfo, value: Inst): Inst {
    let inst = Inst::new();
    inst._op = Some(Op::FieldSet);
    inst.addInput(obj);
    inst.addInput(value);
    inst
}

@pub fun createArgInst(index: Int32, ty: Type): Inst {
    let inst = Inst::new();
    inst._op = Some(Op::Arg);
    inst.ty = ty;
    inst.aux = index.toInt64();
    inst
}

@pub fun createReturnInst(value: Inst, ty: Type): Inst {
    let inst = Inst::new();
    inst._op = Some(Op::Return);
    inst.ty = ty;
    inst.addInput(value);
    inst
}

@pub fun createReturnVoidInst(): Inst {
    let inst = Inst::new();
    inst._op = Some(Op::Return);
    inst.ty = Type::Unit;
    inst
}

@pub fun createIfInst(cond: Inst, thenBlock: Block, elseBlock: Block): Inst {
    let inst = Inst::new();
    inst._op = Some(Op::If);
    inst.block1 = Some(thenBlock);
    inst.block2 = Some(elseBlock);
    inst.addInput(cond);
    inst
}

@pub fun createGotoInst(block: Block): Inst {
    let inst = Inst::new();
    inst._op = Some(Op::Goto);
    inst.block1 = Some(block);
    inst
}

class InstLinkedList {
    first: Option[Inst],
    last: Option[Inst],
}

impl InstLinkedList {
    @static fun new(): InstLinkedList {
        InstLinkedList(None[Inst], None[Inst])
    }

    fun isEmpty(): Bool {
        self.first.isNone()
    }

    fun firstInst(): Inst {
        self.first.getOrPanic()
    }

    fun lastInst(): Inst {
        self.last.getOrPanic()
    }

    fun appendInst(inst: Inst) {
        if self.first.isNone() {
            inst.previous = None;
            inst.next = None;

            self.first = Some(inst);
            self.last = Some(inst);
        } else {
            self.last.getOrPanic().next = Some(inst);

            inst.previous = self.last;
            inst.next = None;

            self.last = Some(inst);
        }
    }

    fun removeInst(inst: Inst) {
        if inst.previous.isSome() {
            let previous = inst.previous.getOrPanic();
            previous.next = inst.next;
        } else {
            self.first = inst.next;
        }

        if inst.next.isSome() {
            let next = inst.next.getOrPanic();
            next.previous = inst.previous;
        } else {
            self.last = inst.previous;
        }
    }
}

class InstIterator {
    current: Option[Inst]
}

impl InstIterator {
    @static fun new(block: Block): InstIterator {
        InstIterator(block.instructions.first)
    }

    fun next(): Option[Inst] {
        if self.current.isSome() {
            let inst = self.current.getOrPanic();
            self.current = inst.next;
            Some[Inst](inst)
        } else {
            None[Inst]
        }
    }
}

class PhiInstIterator {
    current: Option[Inst],
}

impl PhiInstIterator {
    @static fun new(block: Block): PhiInstIterator {
        PhiInstIterator(block.phis.first)
    }

    fun next(): Option[Inst] {
        if self.current.isSome() {
            let inst = self.current.getOrPanic();
            self.current = inst.next;
            Some[Inst](inst)
        } else {
            None[Inst]
        }
    }
}

class BackwardInstIterator {
    current: Option[Inst],
}

impl BackwardInstIterator {
    @static fun new(block: Block): BackwardInstIterator {
        BackwardInstIterator(block.instructions.last)
    }

    fun next(): Option[Inst] {
        if self.current.isSome() {
            let inst = self.current.getOrPanic();
            self.current = inst.previous;
            Some[Inst](inst)
        } else {
            None[Inst]
        }
    }
}

@pub class Edge {
    @pub source: Block,
    @pub target: Block,
    backward: Bool,
} 

impl Edge {
    @static fun new(source: Block, target: Block): Edge {
        Edge(
            source,
            target,
            false,
        )
    }

    @pub fun markAsBackwardEdge() {
        assert(self.backward.not());
        self.backward = true;
    }
}
