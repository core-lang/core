fun verifyGraph(graph: Graph) {
    GraphVerifier(graph).run()
}

class GraphVerifier(let graph: Graph) {
    var currentBlock: Block = graph.getEntryBlock();

    fun run() {
        for block in self.graph.insertionOrderIterator() {
            self.verifyBlock(block);
        }
    }

    fun verifyBlock(block: Block) {
        self.currentBlock = block;

        // block needs to belong to current graph
        assert(block.graph.getOrPanic() === self.graph);

        for phi in block.phisIterator() {
            assert(phi.inputs.size() == block.predecessors.size());
        }

        for inst in block.instructionsIterator() {
            self.verifyInst(inst);

            if inst !== block.lastInst() {
                assert(!inst.isTerminator());
            }
        }

        assert(block.lastInst().isTerminator());
    }

    fun verifyInst(inst: Inst) {
        assert(inst.block.getOrPanic() === self.currentBlock);

        for use in inst.uses() {
            assert(inst.dominates(use.usedBy));
        }
    }
}
