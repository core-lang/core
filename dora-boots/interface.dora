fun compile(info: EncodedCompilationInfo): Array[UInt8] {
    let info = CompilationInfo(info);
    // bytecodeDump(info.bc);
    CodeGen(info).generate()
}

@internal fun encodedBytecode(fct: String): EncodedCompilationInfo;

fun bytecode(fct: String): BytecodeFunction {
    let encoded = encodedBytecode(fct);
    BytecodeFunction(encoded.code, decodeConstPool(encoded.constpool), decodeRegisters(encoded.registers), encoded.arguments)
}

class CompilationInfo(encoded: EncodedCompilationInfo) {
    let bc: BytecodeFunction = BytecodeFunction(encoded.code, decodeConstPool(encoded.constpool), decodeRegisters(encoded.registers), encoded.arguments);
    let arch: Architecture = decodeInstructionSet(encoded.arch);
}

class EncodedCompilationInfo {
    let code: Array[UInt8] = Array[UInt8]::empty();
    let constpool: Array[UInt8] = Array[UInt8]::empty();
    let registers: Array[Int32] = Array[Int32]::empty();
    let registers2: Array[UInt8] = Array[UInt8]::empty();
    let type_params: Array[UInt8] = Array[UInt8]::empty();
    let arguments: Int32 = 0;
    let arch: Int32 = 0;
}

fun decodeRegisters(registers: Array[Int32]): Array[BytecodeType] {
    var i = 0L;
    let result = Array[BytecodeType]::fill(registers.size(), BytecodeType::bool());

    while i < registers.size() {
        let regtype = registers(i);

        let value = if regtype == BC_TYPE_BOOL {
            BytecodeType::bool()
        } else if regtype == BC_TYPE_U_INT8 {
            BytecodeType::uint8()
        } else if regtype == BC_TYPE_CHAR {
            BytecodeType::char()
        } else if regtype == BC_TYPE_INT32 {
            BytecodeType::int32()
        } else if regtype == BC_TYPE_INT64 {
            BytecodeType::int64()
        } else if regtype == BC_TYPE_FLOAT32 {
            BytecodeType::float32()
        } else if regtype == BC_TYPE_FLOAT64 {
            BytecodeType::float64()
        } else if regtype == BC_TYPE_PTR {
            BytecodeType::ptr()
        } else {
            unreachable[BytecodeType]()
        };

        result(i) = value;
        i = i + 1L;
    }

    result
}

fun decodeConstPool(constpool: Array[UInt8]): Array[ConstPoolEntry] {
    let constPool = Vec[ConstPoolEntry]();
    let reader = ByteReader(constpool);

    while reader.moreBytes() {
        let opcode = reader.readUInt8().toInt32();

        if opcode == CONSTPOOL_OPCODE_INT32 {
            let value = reader.readInt32();
            constPool.push(ConstPoolEntry::Int32(value));
        } else if opcode == CONSTPOOL_OPCODE_INT64 {
            let value = reader.readInt64();
            constPool.push(ConstPoolEntry::Int64(value));
        } else if opcode == CONSTPOOL_OPCODE_FLOAT32 {
            let value = reader.readInt32().asFloat32();
            constPool.push(ConstPoolEntry::Float32(value));
        } else if opcode == CONSTPOOL_OPCODE_FLOAT64 {
            let value = reader.readInt64().asFloat64();
            constPool.push(ConstPoolEntry::Float64(value));
        } else if opcode == CONSTPOOL_OPCODE_CHAR {
            let value = reader.readInt32().toCharUnchecked();
            constPool.push(ConstPoolEntry::Char(value));
        } else if opcode == CONSTPOOL_OPCODE_STRING {
            let length = reader.readInt32();
            let start = reader.offset();
            let value = String::fromBytesPart(constpool, start, length.toInt64()).getOrPanic();
            constPool.push(ConstPoolEntry::String(value));
            reader.skipBytes(length.toInt64());
        } else {
            println("unknown opcode = ${opcode}");
            unreachable[()]();
        }
    }

    constPool.toArray()
}

fun decodeInstructionSet(value: Int32): Architecture {
    if value == INSTRUCTION_SET_X64 {
        Architecture::X64
    } else if value == INSTRUCTION_SET_ARM64 {
        Architecture::Arm64
    } else {
            println("unknown instruction set = ${value}");
            unreachable[Architecture]()
    }
}

enum Architecture {
    X64,
    Arm64,
}

class ByteReader(let array: Array[UInt8]) {
    var idx: Int64 = 0L;

    fun moreBytes(): Bool {
        self.idx < self.array.size()
    }

    fun readUInt8(): UInt8 {
        let value = self.array(self.idx);
        self.idx = self.idx + 1L;
        value
    }

    fun readInt32(): Int32 {
        let by1 = self.readUInt8().toInt32();
        let by2 = self.readUInt8().toInt32();
        let by3 = self.readUInt8().toInt32();
        let by4 = self.readUInt8().toInt32();

        (by4 << 24) | (by3 << 16) | (by2 << 8) | by1
    }

    fun readInt64(): Int64 {
        let by1 = self.readUInt8().toInt64();
        let by2 = self.readUInt8().toInt64();
        let by3 = self.readUInt8().toInt64();
        let by4 = self.readUInt8().toInt64();
        let by5 = self.readUInt8().toInt64();
        let by6 = self.readUInt8().toInt64();
        let by7 = self.readUInt8().toInt64();
        let by8 = self.readUInt8().toInt64();

        (by8 << 56) | (by7 << 48) | (by6 << 40) | (by5 << 32) | (by4 << 24) | (by3 << 16) | (by2 << 8) | by1
    }

    fun offset(): Int64 {
        self.idx
    }

    fun skipBytes(value: Int64) {
        self.idx = self.idx + value;
    }
}