use package::bytecode::data::BytecodeType;
use package::bytecode::data::BytecodeFunction;
use package::bytecode::data::BytecodeRegister;
use package::bytecode::data::ConstPoolEntry;
use package::bytecode::data::ConstPoolId;
use package::bytecode::data::FieldId;
use package::bytecode::data::FctId;
use package::bytecode::data::GlobalId;
use package::bytecode::data::ClassDefId;
use package::bytecode::opcode as opc;

@pub class BytecodeBuilder {
    @pub code: Vec[UInt8],
    @pub constPool: Vec[ConstPoolEntry],
    @pub registers: Vec[BytecodeType],
    @pub unresolvedJumps: Vec[UnresolvedJump],
    @pub arguments: Int32,
}

impl BytecodeBuilder {
    @pub @static fun new(): BytecodeBuilder {
        BytecodeBuilder(
            Vec[UInt8]::new(),
            Vec[ConstPoolEntry]::new(),
            Vec[BytecodeType]::new(),
            Vec[UnresolvedJump]::new(),
            0i32
        )
    }

    @pub fun addRegister(ty: BytecodeType): BytecodeRegister {
        self.registers.push(ty);
        BytecodeRegister(self.registers.size().toInt32() - 1i32)
    }

    @pub fun addNRegisters(ty: BytecodeType, count: Int64) {
        let mut idx = 0;

        while idx < count {
            self.registers.push(ty);
            idx = idx + 1;
        }

        self.registers.push(ty);
    }

    @pub fun addRegisters(types: BytecodeType...) {
        for ty in types {
            self.registers.push(ty);
        }
    }

    @pub fun createLabel(): BytecodeLabel {
        BytecodeLabel::new()
    }

    @pub fun defineLabel(): BytecodeLabel {
        BytecodeLabel::new().bindTo(self.code.size().toInt32())
    }

    @pub fun bindLabel(lbl: BytecodeLabel) {
        lbl.bindTo(self.code.size().toInt32());
    }

    @pub fun setArguments(arguments: Int32) {
        self.arguments = arguments;
    }

    @pub fun emitAdd(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {
        self.emitReg3(opc::BC_ADD, dest, lhs, rhs);
    }

    @pub fun emitSub(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {
        self.emitReg3(opc::BC_SUB, dest, lhs, rhs);
    }

    @pub fun emitNeg(dest: BytecodeRegister, src: BytecodeRegister) {
        self.emitReg2(opc::BC_NEG, dest, src);
    }

    @pub fun emitMul(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {
        self.emitReg3(opc::BC_MUL, dest, lhs, rhs);
    }

    @pub fun emitDiv(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {
        self.emitReg3(opc::BC_DIV, dest, lhs, rhs);
    }

    @pub fun emitMod(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {
        self.emitReg3(opc::BC_MOD, dest, lhs, rhs);
    }

    @pub fun emitAnd(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {
        self.emitReg3(opc::BC_AND, dest, lhs, rhs);
    }

    @pub fun emitOr(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {
        self.emitReg3(opc::BC_OR, dest, lhs, rhs);
    }

    @pub fun emitXor(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {
        self.emitReg3(opc::BC_XOR, dest, lhs, rhs);
    }

    @pub fun emitNot(dest: BytecodeRegister, src: BytecodeRegister) {
        self.emitReg2(opc::BC_NOT, dest, src);
    }

    @pub fun emitShl(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {
        self.emitReg3(opc::BC_SHL, dest, lhs, rhs);
    }

    @pub fun emitShr(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {
        self.emitReg3(opc::BC_SHR, dest, lhs, rhs);
    }

    @pub fun emitSar(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {
        self.emitReg3(opc::BC_SAR, dest, lhs, rhs);
    }

    @pub fun emitMov(dest: BytecodeRegister, src: BytecodeRegister) {
        self.emitReg2(opc::BC_MOV, dest, src);
    }

    @pub fun emitLoadField(dest: BytecodeRegister, obj: BytecodeRegister, cls: ClassDefId, field: FieldId) {
        self.emitField(opc::BC_LOAD_FIELD, dest, obj, cls, field);
    }

    @pub fun emitStoreField(src: BytecodeRegister, obj: BytecodeRegister, cls: ClassDefId, field: FieldId) {
        self.emitField(opc::BC_STORE_FIELD, src, obj, cls, field);
    }

    @pub fun emitLoadGlobal(dest: BytecodeRegister, glob: GlobalId) {
        self.emitGlobal(opc::BC_LOAD_GLOBAL, dest, glob);
    }

    @pub fun emitStoreGlobal(src: BytecodeRegister, glob: GlobalId) {
        self.emitGlobal(opc::BC_STORE_GLOBAL, src, glob);
    }

    @pub fun emitPushRegister(src: BytecodeRegister) {
        self.emitReg1(opc::BC_PUSH_REGISTER, src);
    }

    @pub fun emitConstTrue(dest: BytecodeRegister) {
        self.emitReg1(opc::BC_CONST_TRUE, dest);
    }

    @pub fun emitConstFalse(dest: BytecodeRegister) {
        self.emitReg1(opc::BC_CONST_FALSE, dest);
    }

    @pub fun emitConstByte(dest: BytecodeRegister, value: UInt8) {
        self.emitReg1AndByte(opc::BC_CONST_UINT8, dest, value);
    }

    @pub fun emitConstChar(dest: BytecodeRegister, idx: ConstPoolId) {
        self.emitReg1AndIdx(opc::BC_CONST_CHAR, dest, idx);
    }

    @pub fun emitConstInt32(dest: BytecodeRegister, idx: ConstPoolId) {
        self.emitReg1AndIdx(opc::BC_CONST_INT32, dest, idx);
    }

    @pub fun emitConstInt64(dest: BytecodeRegister, idx: ConstPoolId) {
        self.emitReg1AndIdx(opc::BC_CONST_INT64, dest, idx);
    }

    @pub fun emitConstFloat32(dest: BytecodeRegister, idx: ConstPoolId) {
        self.emitReg1AndIdx(opc::BC_CONST_FLOAT32, dest, idx);
    }

    @pub fun emitConstFloat64(dest: BytecodeRegister, idx: ConstPoolId) {
        self.emitReg1AndIdx(opc::BC_CONST_FLOAT64, dest, idx);
    }

    @pub fun emitConstString(dest: BytecodeRegister, idx: ConstPoolId) {
        self.emitReg1AndIdx(opc::BC_CONST_STRING, dest, idx);
    }

    @pub fun emitTestEq(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {
        self.emitReg3(opc::BC_TEST_EQ, dest, lhs, rhs);
    }

    @pub fun emitTestNe(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {
        self.emitReg3(opc::BC_TEST_NE, dest, lhs, rhs);
    }

    @pub fun emitTestGt(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {
        self.emitReg3(opc::BC_TEST_GT, dest, lhs, rhs);
    }

    @pub fun emitTestGe(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {
        self.emitReg3(opc::BC_TEST_GE, dest, lhs, rhs);
    }

    @pub fun emitTestLt(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {
        self.emitReg3(opc::BC_TEST_LT, dest, lhs, rhs);
    }

    @pub fun emitTestLe(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {
        self.emitReg3(opc::BC_TEST_LE, dest, lhs, rhs);
    }

    @pub fun emitLoopStart() {
        self.emitInst(opc::BC_LOOP_START);
    }

    @pub fun emitJumpLoop(lbl: BytecodeLabel) {
        assert(lbl.isBound());
        let offset = self.code.size().toInt32() - lbl.offset();
        self.emitJmp(opc::BC_JUMP_LOOP, offset);
    }

    @pub fun emitJumpIfFalse(opnd: BytecodeRegister, lbl: BytecodeLabel) {
        assert(lbl.isBound().not());
        self.emitJmpForward(opc::BC_JUMP_IF_FALSE, opc::BC_JUMP_IF_FALSE_CONST, Some[BytecodeRegister](opnd), lbl);
    }

    @pub fun emitJumpIfTrue(opnd: BytecodeRegister, lbl: BytecodeLabel) {
        assert(lbl.isBound().not());
        self.emitJmpForward(opc::BC_JUMP_IF_TRUE, opc::BC_JUMP_IF_TRUE_CONST, Some[BytecodeRegister](opnd), lbl);
    }

    @pub fun emitJump(lbl: BytecodeLabel) {
        assert(lbl.isBound().not());
        self.emitJmpForward(opc::BC_JUMP, opc::BC_JUMP_CONST, None[BytecodeRegister], lbl);
    }

    @pub fun emitInvokeDirect(dest: BytecodeRegister, fct: FctId, start: BytecodeRegister, count: Int32) {
        self.emitFct(opc::BC_INVOKE_DIRECT, dest, fct, start, count);
    }

    @pub fun emitInvokeVirtual(dest: BytecodeRegister, fct: FctId, start: BytecodeRegister, count: Int32) {
        self.emitFct(opc::BC_INVOKE_VIRTUAL, dest, fct, start, count);
    }

    @pub fun emitInvokeStatic(dest: BytecodeRegister, fct: FctId, start: BytecodeRegister, count: Int32) {
        self.emitFct(opc::BC_INVOKE_STATIC, dest, fct, start, count);
    }

    @pub fun emitNewObject(dest: BytecodeRegister, cls: ClassDefId) {
        self.emitVal3(opc::BC_NEW_OBJECT, dest.value, cls.value);
    }

    @pub fun emitArrayLength(dest: BytecodeRegister) {
        self.emitReg1(opc::BC_ARRAY_LENGTH, dest);
    }

    @pub fun emitLoadArray(dest: BytecodeRegister, arr: BytecodeRegister, idx: BytecodeRegister) {
        self.emitReg3(opc::BC_LOAD_ARRAY, dest, arr, idx);
    }

    @pub fun emitStoreArray(src: BytecodeRegister, arr: BytecodeRegister, idx: BytecodeRegister) {
        self.emitReg3(opc::BC_STORE_ARRAY, src, arr, idx);
    }

    @pub fun emitRet(opnd: BytecodeRegister) {
        self.emitReg1(opc::BC_RET, opnd);
    }

    @pub fun generate(): BytecodeFunction {
        self.resolveJumps();
        let code = self.code.toArray();
        let constPool = self.constPool.toArray();
        let registers = self.registers.toArray();
        let arguments = self.arguments;
        assert(arguments.toInt64() <= registers.size());
        BytecodeFunction(code, constPool, registers, arguments)
    }

    fun resolveJumps() {
        for jump in self.unresolvedJumps {
            assert(jump.label.isBound());

            assert(jump.label.offset() > jump.inst);
            let offset = jump.label.offset() - jump.inst;

            let opcode = self.code(jump.inst.toInt64()).toInt32();

            if opcode == opc::BC_WIDE {
                // wide is guaranteed to not use constant pool
                self.patchInt32(jump.target, offset);
            } else if isWide(offset) {
                // Need to update const pool entry
                let idx = self.code(jump.target.toInt64());
                self.constPool(idx.toInt64()) = ConstPoolEntry::Int32(offset);
            } else {
                // Offset fits into byte, replace instruction with jump+immediate
                let opcode = if opcode == opc::BC_JUMP_CONST {
                    opc::BC_JUMP
                } else if opcode == opc::BC_JUMP_IF_FALSE_CONST {
                    opc::BC_JUMP_IF_FALSE
                } else if opcode == opc::BC_JUMP_IF_TRUE_CONST {
                    opc::BC_JUMP_IF_TRUE
                } else {
                    std::fatalError("unexpected opcode ${opc::bytecodeName(opcode)} (${opcode})");
                    unreachable[Int32]()
                };

                self.code(jump.inst.toInt64()) = opcode.toUInt8();
                self.code(jump.target.toInt64()) = offset.toUInt8();
            }
        }

        self.unresolvedJumps.clear();
    }

    fun emitFctVoid(inst: Int32, fct: FctId, start: BytecodeRegister, count: Int32) {
        self.emitVal4(inst, fct.value, start.value, count);
    }

    fun emitFct(inst: Int32, dest: BytecodeRegister, fct: FctId, start: BytecodeRegister, count: Int32) {
        self.emitVal5(inst, dest.value, fct.value, start.value, count);
    }

    fun emitJmp(inst: Int32, offset: Int32) {
        self.emitVal2(inst, offset);
    }

    fun emitJmpForward(inst: Int32, instConst: Int32, opnd: Option[BytecodeRegister], lbl: BytecodeLabel) {
        assert(isWide(inst).not());
        assert(isWide(instConst).not());
        let start = self.code.size().toInt32();
        let mut target = 0i32;

        if (opnd.isSome() && isWide(opnd.getOrPanic().value)) || isWide(self.constPool.size().toInt32()) {
            self.emitWide();
            self.emitOpcode(inst);
            if opnd.isSome() {
                self.emitInt32(opnd.getOrPanic().value);
            }
            target = self.code.size().toInt32();
            self.emitInt32(0i32);
        } else {
            self.emitOpcode(instConst);
            if opnd.isSome() {
                self.emitByte(opnd.getOrPanic().value);
            }
            let idx = self.addConst(ConstPoolEntry::Int32(0i32));
            target = self.code.size().toInt32();
            self.emitByte(idx.value);
        }

        self.unresolvedJumps.push(UnresolvedJump(start, target, lbl));
    }

    fun emitInst(inst: Int32) {
        self.emitVal1(inst);
    }

    @pub fun addConst(entry: ConstPoolEntry): ConstPoolId {
        self.constPool.push(entry);
        ConstPoolId(self.constPool.size().toInt32() - 1i32)
    }

    fun emitReg1(inst: Int32, r1: BytecodeRegister) {
        self.emitVal2(inst, r1.value);
    }

    fun emitReg1AndIdx(inst: Int32, r1: BytecodeRegister, idx: ConstPoolId) {
        self.emitVal3(inst, r1.value, idx.value);
    }

    fun emitReg1AndByte(inst: Int32, r1: BytecodeRegister, offset: UInt8) {
        self.emitVal2(inst, r1.value);
        self.emitByte(offset.toInt32());
    }

    fun emitReg1AndCls(inst: Int32, r1: BytecodeRegister, cls: ClassDefId) {
        self.emitVal3(inst, r1.value, cls.value);
    }

    fun emitReg2(inst: Int32, r1: BytecodeRegister, r2: BytecodeRegister) {
        self.emitVal3(inst, r1.value, r2.value);
    }

    fun emitReg2AndCls(inst: Int32, r1: BytecodeRegister, r2: BytecodeRegister, cls: ClassDefId) {
        self.emitVal4(inst, r1.value, r2.value, cls.value);
    }

    fun emitReg3(inst: Int32, r1: BytecodeRegister, r2: BytecodeRegister, r3: BytecodeRegister) {
        self.emitVal4(inst, r1.value, r2.value, r3.value);
    }

    fun emitGlobal(inst: Int32, r1: BytecodeRegister, glob: GlobalId) {
        self.emitVal3(inst, r1.value, glob.value);
    }

    fun emitField(
        inst: Int32,
        r1: BytecodeRegister,
        r2: BytecodeRegister,
        cls: ClassDefId,
        field: FieldId,
    ) {
        self.emitVal5(inst, r1.value, r2.value, cls.value, field.value);
    }

    fun emitVal1(opcode: Int32) {
        self.emitOpcode(opcode);
    }

    fun emitVal2(opcode: Int32, v1: Int32) {
        if isWide(v1) {
            self.emitWide();
            self.emitOpcode(opcode);
            self.emitInt32(v1);
        } else {
            self.emitOpcode(opcode);
            self.emitByte(v1);
        }
    }

    fun emitVal3(opcode: Int32, v1: Int32, v2: Int32) {
        if isWide(v1) || isWide(v2) {
            self.emitWide();
            self.emitOpcode(opcode);
            self.emitInt32(v1);
            self.emitInt32(v2);
        } else {
            self.emitOpcode(opcode);
            self.emitByte(v1);
            self.emitByte(v2);
        }
    }

    fun emitVal4(opcode: Int32, v1: Int32, v2: Int32, v3: Int32) {
        if isWide(v1) || isWide(v2) || isWide(v3) {
            self.emitWide();
            self.emitOpcode(opcode);
            self.emitInt32(v1);
            self.emitInt32(v2);
            self.emitInt32(v3);
        } else {
            self.emitOpcode(opcode);
            self.emitByte(v1);
            self.emitByte(v2);
            self.emitByte(v3);
        }
    }

    fun emitVal5(opcode: Int32, v1: Int32, v2: Int32, v3: Int32, v4: Int32) {
        if isWide(v1) || isWide(v2) || isWide(v3) || isWide(v4) {
            self.emitWide();
            self.emitOpcode(opcode);
            self.emitInt32(v1);
            self.emitInt32(v2);
            self.emitInt32(v3);
            self.emitInt32(v4);
        } else {
            self.emitOpcode(opcode);
            self.emitByte(v1);
            self.emitByte(v2);
            self.emitByte(v3);
            self.emitByte(v4);
        }
    }

    fun emitWide() {
        self.emitByte(opc::BC_WIDE);
    }

    fun emitOpcode(opcode: Int32) {
        if opcode >= 255i32 {
            self.emitByte(255i32);
            assert(opcode < 512i32);
            self.emitByte(opcode - 255i32);
        } else {
            self.emitByte(opcode);
        }
    }

    fun emitByte(val: Int32) {
        assert(val >= 0i32 && val <= 255i32);
        self.code.push(val.toUInt8());
    }

    fun emitInt32(val: Int32) {
        assert(val >= 0i32);
        self.emitByte(val & 0xFFi32);
        self.emitByte(val.shiftRight(8i32) & 0xFFi32);
        self.emitByte(val.shiftRight(16i32) & 0xFFi32);
        self.emitByte(val.shiftRight(24i32) & 0xFFi32);
    }

    fun patchInt32(idx: Int32, val: Int32) {
        assert(val >= 0i32);
        let idx = idx.toInt64();
        self.code(idx) = (val & 0xFFi32).toUInt8();
        self.code(idx + 1i64) = (val.shiftRight(8i32) & 0xFFi32).toUInt8();
        self.code(idx + 2i64) = (val.shiftRight(16i32) & 0xFFi32).toUInt8();
        self.code(idx + 3i64) = (val.shiftRight(24i32) & 0xFFi32).toUInt8();
    }
}

fun isWide(val: Int32): Bool = val > 255i32;

class BytecodeLabel(off: Int32)

impl BytecodeLabel {
    @static fun new(): BytecodeLabel {
        BytecodeLabel(-1i32)
    }

    fun bindTo(offset: Int32): BytecodeLabel {
        assert(offset >= 0i32);
        self.off = offset;
        self
    }

    fun isBound(): Bool = self.off >= 0i32;

    fun offset(): Int32 {
        assert(self.isBound());
        self.off
    }
}

class UnresolvedJump(inst: Int32, target: Int32, label: BytecodeLabel)
