use package::graph::Graph;
use package::graph::Block;
use package::graph::Inst;
use package::graph::Op;
use package::graph::ty::Type;
use package::bytecode::data::BytecodeFunction;
use package::graph::createBinaryInst;
use package::graph::createInt32Const;
use package::graph::createReturnInst;
use package::graph::createReturnVoidInst;
use package::graph::createGotoInst;
use package::graph::dump::assertGraph;

@pub class GraphBuilder {
    graph: Graph,
    insertion: Option[Block],
    entryBlock: Option[Block],
}

impl GraphBuilder {
    @pub @static fun new(): GraphBuilder {
        GraphBuilder(
            Graph::new(),
            None[Block],
            None[Block],
        )
    }

    @pub fun addBlock(): Block {
        let block = Block::new();

        if self.entryBlock.isNone() {
            self.entryBlock = Some(block);
            self.graph.setEntryBlock(block);
        }

        self.graph.addBlock(block);
        self.insertion = Some(block);
        block
    }

    @pub fun createInt32Const(value: Int32): Inst {
        let inst = createInt32Const(value);
        self.appendInst(inst)
    }

    @pub fun createAdd(lhs: Inst, rhs: Inst, ty: Type): Inst {
        let inst = createBinaryInst(Op::Add, ty, lhs, rhs);
        self.appendInst(inst)
    }

    @pub fun createReturn(inst: Inst, ty: Type): Inst {
        let inst = createReturnInst(inst, ty);
        self.appendInst(inst)
    }

    @pub fun createReturnVoid(): Inst {
        let inst = createReturnVoidInst();
        self.appendInst(inst)
    }

    @pub fun createGoto(block: Block): Inst {
        let inst = createGotoInst(block);
        self.appendInst(inst)
    }

    fun appendInst(inst: Inst): Inst {
        let block = self.insertion.getOrPanic();
        block.appendInst(inst);

        if inst.isTerminator() {
            self.insertion = None;
        }

        inst
    }

    @pub fun build(): Graph {
        assert(self.entryBlock.isSome());

        self.graph
    }
}

@Test
fun testEmptyGraph() {
    let builder = GraphBuilder::new();
    let block = builder.addBlock();
    let value = builder.createInt32Const(12i32);
    builder.createReturn(value, Type::Int32);

    assertGraph(builder.build(), "
@0:
  %0: Const.Int32(#12) [%1]
  %1: Ret.Int32 %0
");
}
