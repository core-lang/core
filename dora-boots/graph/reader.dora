use std::StringBuffer;
use package::graph::Graph;

fun readGraph(data: String): Graph {
    unreachable[Graph]()
}

class GraphReader {
    content: String,
    lexer: Lexer,
}

impl GraphReader {
    @static fun new(content: String): GraphReader {
        GraphReader(content, Lexer::new(content))
    }

    fun read() {

    }
}

class Lexer {
    content: String,
    idx: Int64,
}

impl Lexer {
    @static fun new(content: String): Lexer {
        Lexer(content, 0)
    }

    fun look(): Option[Char] {
        if self.idx == self.content.size() {
            return None;
        }

        Some(self.content.getByte(self.idx).toChar())
    }

    fun readChar() {
        if self.idx == self.content.size() {
            std::fatalError("already at end of file");
        } else {
            self.idx = self.idx + 1i64;
        }
    }

    fun readToken(): Token {
        while true {
            self.skipWhitespace();

            let char = self.look();

            if char.isNone() {
                return Token::End;
            }

            if isIdentifierStart(char) {
                return self.readIdentifier();
            } else if isNewline(char) {
                return self.readNewline();
            } else if isOperator(char) {
                return self.readOperator();
            } else if isDigit(char) {
                return self.readNumber();
            } else {
                std::fatalError("unknown character ${char.getOrPanic()}");
            }
        }

        unreachable[Token]()
    }

    fun skipWhitespace() {
        while isWhitespace(self.look()) {
            self.readChar();
        }
    }

    fun readIdentifier(): Token {
        let buffer = StringBuffer::empty();

        while isIdentifierStart(self.look()) || isDigit(self.look()) {
            let look = self.look().getOrPanic();
            buffer.appendChar(look);
            self.readChar();
        }

        Token::Ident(buffer.toString())
    }

    fun readNewline(): Token {
        let ch = self.look().getOrPanic();
        assert(ch == '\n');
        self.readChar();

        Token::Newline
    }

    fun readOperator(): Token {
        let ch = self.look().getOrPanic();
        self.readChar();

        if ch == ':' {
            Token::Colon
        } else if ch == '=' {
            Token::Eq
        } else if ch == '%' {
            Token::Percent
        } else if ch == '@' {
            Token::At
        } else {
            unreachable[Token]()
        }
    }

    fun readNumber(): Token {
        let buffer = StringBuffer::empty();

        while isDigit(self.look()) {
            let look = self.look().getOrPanic();
            buffer.appendChar(look);
            self.readChar();
        }

        let value = buffer.toString().toInt64().getOrPanic();
        Token::Number(value)
    }
}

fun isWhitespace(ch: Option[Char]): Bool {
    if ch.isNone() {
        return false;
    }

    let ch = ch.getOrPanic();

    ch == ' ' || ch == '\t'
}

fun isOperator(ch: Option[Char]): Bool {
    if ch.isNone() {
        return false;
    }

    let ch = ch.getOrPanic();

    ch == ':' || ch == '=' || ch == '%' || ch == '@'
}

fun isIdentifierStart(ch: Option[Char]): Bool {
    if ch.isNone() {
        return false;
    }

    let ch = ch.getOrPanic();

    (ch >= 'a' && ch <= 'z') || (ch >= 'A' && ch <= 'Z') || ch == '_'
}

fun isDigit(ch: Option[Char]): Bool {
    if ch.isNone() {
        return false;
    }

    let ch = ch.getOrPanic();

    (ch >= '0' && ch <= '9')
}

fun isNewline(ch: Option[Char]): Bool {
    if ch.isNone() {
        return false;
    }

    ch.getOrPanic() == '\n'
}

enum Token {
    End,
    Ident(String),
    Number(Int64),
    Newline,
    Colon,
    Eq,
    At,
    Percent,
}

mod tests {
    use super::Token;
    use super::Lexer;

    @Test
    fun readSingleIdentifier() {
        let lexer = Lexer::new("foo");
        assertIdent(lexer, "foo");
        assertEnd(lexer);
    }

    @Test
    fun readMultipleIdentifiers() {
        let lexer = Lexer::new("foo bar baz");
        assertIdent(lexer, "foo");
        assertIdent(lexer, "bar");
        assertIdent(lexer, "baz");
        assertEnd(lexer);
    }

    @Test
    fun readMultipleLines() {
        let lexer = Lexer::new("foo\nbar\nbaz");
        assertIdent(lexer, "foo");
        assertNewline(lexer);
        assertIdent(lexer, "bar");
        assertNewline(lexer);
        assertIdent(lexer, "baz");
        assertEnd(lexer);
    }

    @Test
    fun readOperators() {
        let lexer = Lexer::new(":=@%");
        assertColon(lexer);
        assertEq(lexer);
        assertAt(lexer);
        assertPercent(lexer);
        assertEnd(lexer);
    }

    @Test
    fun readNumbers() {
        let lexer = Lexer::new("11212 17");
        assertNumber(lexer, 11212i64);
        assertNumber(lexer, 17i64);
        assertEnd(lexer);
    }

    fun assertIdent(lexer: Lexer, ident: String) {
        let token = lexer.readToken();

        match token {
            Token::Ident(value) => {
                assert(value == ident);
            },

            _ => {
                std::fatalError("identifier expected");
            }
        }
    }

    fun assertNumber(lexer: Lexer, number: Int64) {
        let token = lexer.readToken();

        match token {
            Token::Number(value) => {
                assert(value == number);
            },

            _ => {
                std::fatalError("number expected");
            }
        }
    }

    fun assertNewline(lexer: Lexer) {
        let token = lexer.readToken();

        match token {
            Token::Newline => {},
            _ => {
                std::fatalError("newline expected");
            }
        }
    }

    fun assertEq(lexer: Lexer) {
        let token = lexer.readToken();

        match token {
            Token::Eq => {},
            _ => {
                std::fatalError("eq expected");
            }
        }
    }

    fun assertColon(lexer: Lexer) {
        let token = lexer.readToken();

        match token {
            Token::Colon => {},
            _ => {
                std::fatalError("eq expected");
            }
        }
    }

    fun assertAt(lexer: Lexer) {
        let token = lexer.readToken();

        match token {
            Token::At => {},
            _ => {
                std::fatalError("at expected");
            }
        }
    }

    fun assertPercent(lexer: Lexer) {
        let token = lexer.readToken();

        match token {
            Token::Percent => {},
            _ => {
                std::fatalError("percent expected");
            }
        }
    }

    fun assertEnd(lexer: Lexer) {
        let token = lexer.readToken();

        match token {
            Token::End => {},
            _ => {
                std::fatalError("end expected");
            }
        }
    }
}