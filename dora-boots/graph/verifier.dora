use package::graph::Graph;
use package::graph::Block;
use package::graph::Inst;

@pub fun verifyGraph(graph: Graph) {
    GraphVerifier::new(graph).run()
}

class GraphVerifier {
    graph: Graph,
    currentBlock: Block,
}

impl GraphVerifier {
    @static fun new(graph: Graph): GraphVerifier {
        GraphVerifier(
            graph,
            graph.getEntryBlock(),
        )
    }

    fun run() {
        for block in self.graph.insertionOrderIterator() {
            self.verifyBlock(block);
        }
    }

    fun verifyBlock(block: Block) {
        self.currentBlock = block;

        // block needs to belong to current graph
        assert(block.getGraph() === self.graph);

        for phi in block.phisIterator() {
            assert(phi.getInputs().size() == block.predecessors.size());
        }

        for inst in block.instructionsIterator() {
            self.verifyInst(inst);

            if inst !== block.lastInst() {
                assert(inst.isTerminator().not());
            }
        }

        assert(block.lastInst().isTerminator());
    }

    fun verifyInst(inst: Inst) {
        assert(inst.getBlock() === self.currentBlock);

        for user in inst.uses() {
            assert(inst.dominates(user.usedBy));
        }
    }
}
