class Foo[T1](value1: T1)

enum Either[A, B] {
  Left(A),
  Right(B),
}

impl[A, B] Either[A, B] {
  fun toRight(): Option[B] = if self
  ... is Either::Left(_) { None[B] }
  ... is Either::Right(b) { Some[B](b) };

  fun toLeft(): Option[A] = if self
  ... is Either::Left(a) { Some[A](a) }
  ... is Either::Right(_) { None[A] };
}

impl[T1] Foo[T1] {
  fun bar[T2](value2: T2): (Bool): Either[T1, T2] {
    |selector: Bool|: Either[T1, T2] {
      if selector {
        Either::Left[T1, T2](self.value1)
      } else {
        Either::Right[T1, T2](value2)
      }
    }
  }
}

fun main(): Unit {
  let l1 = Foo[Int64](100).bar[String]("bar");
  assert(l1(true).toLeft().getOrPanic() == 100);
  assert(l1(false).toRight().getOrPanic() == "bar");
}
