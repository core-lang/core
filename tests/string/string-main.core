fun main(): Unit {
    test_multiple_ascii_chars();

    test_1byte();
    test_2bytes();
    test_3bytes();
    test_4bytes();

    test_invalid();
}

fun test_multiple_ascii_chars(): Unit {
    let bytes = Array[UInt8]::zero(3i64);
    bytes(0i64) = 'a'.toInt32().toUInt8();
    bytes(1i64) = 'b'.toInt32().toUInt8();
    bytes(2i64) = 'c'.toInt32().toUInt8();

    let val = String::fromBytes(bytes).getOrPanic();
    let it = val.codePoints();

    assert(it.next().getOrPanic() == 'a');
    assert(it.next().getOrPanic() == 'b');
    assert(it.next().getOrPanic() == 'c');
    it.next().unwrapNone();
}

fun test_1byte(): Unit {
    let bytes = Array[UInt8]::zero(1i64);
    bytes(0i64) = 0x24u8;

    let val = String::fromBytes(bytes).getOrPanic();
    let it = val.codePoints();

    assert(it.next().getOrPanic() == 0x24.toChar().getOrPanic());
    it.next().unwrapNone();
}

fun test_2bytes(): Unit {
    let bytes = Array[UInt8]::zero(2i64);
    bytes(0i64) = 0xC2u8;
    bytes(1i64) = 0xA2u8;

    let val = String::fromBytes(bytes).getOrPanic();
    let it = val.codePoints();

    assert(it.next().getOrPanic() == 0xA2.toChar().getOrPanic());
    it.next().unwrapNone();
}

fun test_3bytes(): Unit {
    let bytes = Array[UInt8]::zero(3i64);
    bytes(0i64) = 0xE2u8;
    bytes(1i64) = 0x82u8;
    bytes(2i64) = 0xACu8;

    let val = String::fromBytes(bytes).getOrPanic();
    let it = val.codePoints();

    assert(it.next().getOrPanic() == 0x20ACi32.toChar().getOrPanic());
    it.next().unwrapNone();
}

fun test_4bytes(): Unit {
    let bytes = Array[UInt8]::zero(4i64);
    bytes(0i64) = 0xF0u8;
    bytes(1i64) = 0x90u8;
    bytes(2i64) = 0x8Du8;
    bytes(3i64) = 0x88u8;

    let val = String::fromBytes(bytes).getOrPanic();
    let it = val.codePoints();

    assert(it.next().getOrPanic() == 0x10348.toChar().getOrPanic());
    it.next().unwrapNone()
}

fun test_invalid(): Unit {
    let bytes = Array[UInt8]::zero(1i64);
    bytes(0i64) = 0x80u8;

    let fail = String::fromBytes(bytes);
    assert(fail.isNone());
}
