fun main(): Unit {
    assert(mysum1(List[Int32]::new()) == 0i32);
    assert(mysum1(List[Int32]::new(1i32)) == 1i32);
    assert(mysum1(List[Int32]::new(1i32, 2i32, 3i32, 4i32, 5i32)) == 15i32);

    assert(mysum2(List[Float32]::new()) == 0.0f32);
    assert(mysum2(List[Float32]::new(1.0f32)) == 1.0f32);
    assert(mysum2(List[Float32]::new(1.0f32, 2.0f32, 3.0f32, 4.0f32, 5.0f32)) == 15.0f32);
}

fun mysum1(x: List[Int32]): Int32 {
    let mut entries = 0i32;
    for val in x {
        entries = entries + val;
    }
    entries
}

fun mysum2(x: List[Float32]): Float32 {
    let mut entries = 0.0f32;
    for val in x {
        entries = entries + val;
    }
    entries
}
