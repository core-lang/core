fun main() {
    let vec = Vec[Int32]::new();
    assert(vec.size() == 0i64);
    assert(vec.capacity() == 0i64);

    vec.push(1i32);
    vec.push(2i32);
    vec.push(3i32);
    assert(vec.size() == 3i64);
    assert(vec.capacity() == 4i64);

    vec.push(4i32);
    assert(vec.size() == 4i64);
    assert(vec.capacity() == 4i64);

    vec.push(5i32);
    assert(vec.size() == 5i64);
    assert(vec.capacity() == 8i64);
    assert(vec(0i64) == 1i32);
    assert(vec(1i64) == 2i32);
    assert(vec(2i64) == 3i32);
    assert(vec(3i64) == 4i32);
    assert(vec(4i64) == 5i32);

    vec(0i64) = vec(0i64) + 2i32;
    vec(1i64) = vec(0i64) - 1i32;

    assert(vec(0i64) == 3i32);
    assert(vec(1i64) == 2i32);

    vec.trimToLen();
    assert(vec.size() == 5i64);
    assert(vec.capacity() == 5i64);

    assert(vec(0i64) == 3i32);
    assert(vec(1i64) == 2i32);
    assert(vec(2i64) == 3i32);
    assert(vec(3i64) == 4i32);
    assert(vec(4i64) == 5i32);
}
