fun main(): Unit {
    assert(not(20i32) == -21i32);

    assert(add(20i32, 7i32) == 27i32);
    assert(sub(20i32, 7i32) == 13i32);
    assert(mul(20i32, 7i32) == 140i32);
    assert(div(20i32, 7i32) == 2i32);
    
    assert(rem(20i32, 7i32) == 6i32);

    assert(neg(20i32) == -20i32);
    assert(neg(-5i32) == 5i32);

    assert(or(20i32, 5i32) == 21i32);
    assert(xor(20i32, 5i32) == 17i32);
    assert(and(20i32, 5i32) == 4i32);

    assert(eq(20i32, 5i32).not());
    assert(eq(5i32, 5i32));
    assert(eq(5i32, 20i32).not());

    assert(ne(20i32, 5i32));
    assert(ne(5i32, 5i32).not());
    assert(ne(5i32, 20i32));


    assert(lt(20i32, 5i32).not());
    assert(lt(5i32, 5i32).not());
    assert(lt(5i32, 20i32));

    assert(le(20i32, 5i32).not());
    assert(le(5i32, 5i32));
    assert(le(5i32, 20i32));

    assert(ge(20i32, 5i32));
    assert(ge(5i32, 5i32));
    assert(ge(5i32, 20i32).not());

    assert(gt(20i32, 5i32));
    assert(gt(5i32, 5i32).not());
    assert(gt(5i32, 20i32).not());
}

fun not(x: Int32): Int32 = x.not();

fun add(x: Int32, y: Int32): Int32 = x+y;

fun sub(x: Int32, y: Int32): Int32 = x-y;

fun mul(x: Int32, y: Int32): Int32 = x*y;

fun div(x: Int32, y: Int32): Int32 = x/y;

fun rem(y: Int32, z: Int32): Int32 = y.remainder(z);

fun or(x: Int32, y: Int32): Int32 = x | y;

fun xor(x: Int32, y: Int32): Int32 = x ^ y;

fun and(x: Int32, y: Int32): Int32 = x & y;

fun eq(x: Int32, y: Int32): Bool = x == y;

fun ne(x: Int32, y: Int32): Bool = x != y;

fun lt(x: Int32, y: Int32): Bool = x < y;

fun le(x: Int32, y: Int32): Bool = x <= y;

fun ge(x: Int32, y: Int32): Bool = x >= y;

fun gt(x: Int32, y: Int32): Bool = x > y;

fun neg(x: Int32): Int32 = -x;
