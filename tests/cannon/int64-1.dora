fn main() {
    assert(not(20i64) == -21i64);

    assert(add(20i64, 7i64) == 27i64);
    assert(sub(20i64, 7i64) == 13i64);
    assert(mul(20i64, 7i64) == 140i64);
    assert(div(20i64, 7i64) == 2i64);
    
    assert(modulo(20i64, 7i64) == 6i64);

    assert(neg(20i64) == -20i64);
    assert(neg(-5i64) == 5i64);

    assert(or(20i64, 5i64) == 21i64);
    assert(xor(20i64, 5i64) == 17i64);
    assert(and(20i64, 5i64) == 4i64);

    assert(!eq(20i64, 5i64));
    assert(eq(5i64, 5i64));
    assert(!eq(5i64, 20i64));

    assert(ne(20i64, 5i64));
    assert(!ne(5i64, 5i64));
    assert(ne(5i64, 20i64));


    assert(!lt(20i64, 5i64));
    assert(!lt(5i64, 5i64));
    assert(lt(5i64, 20i64));

    assert(!le(20i64, 5i64));
    assert(le(5i64, 5i64));
    assert(le(5i64, 20i64));

    assert(ge(20i64, 5i64));
    assert(ge(5i64, 5i64));
    assert(!ge(5i64, 20i64));

    assert(gt(20i64, 5i64));
    assert(!gt(5i64, 5i64));
    assert(!gt(5i64, 20i64));
}

fn not(x: Int64): Int64 {
    return !x;
}

fn add(x: Int64, y: Int64): Int64 {
    return x+y;
}

fn sub(x: Int64, y: Int64): Int64 {
    return x-y;
}

fn mul(x: Int64, y: Int64): Int64 {
    return x*y;
}

fn div(x: Int64, y: Int64): Int64 {
    return x/y;
}

fn modulo(y: Int64, z: Int64): Int64 {
    return y%z;
}

fn or(x: Int64, y: Int64): Int64 {
    return x | y;
}

fn xor(x: Int64, y: Int64): Int64 {
    return x ^ y;
}

fn and(x: Int64, y: Int64): Int64 {
    return x & y;
}

fn eq(x: Int64, y: Int64): Bool {
    return x == y;
}

fn ne(x: Int64, y: Int64): Bool {
    return x != y;
}

fn lt(x: Int64, y: Int64): Bool {
    return x < y;
}

fn le(x: Int64, y: Int64): Bool {
    return x <= y;
}

fn ge(x: Int64, y: Int64): Bool {
    return x >= y;
}

fn gt(x: Int64, y: Int64): Bool {
    return x > y;
}

fn neg(x: Int64): Int64 {
    return -x;
}