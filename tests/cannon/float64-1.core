fun main(): Unit {
    assert(test_with_epsilon(add(20f64, 5f64, 2f64), 27f64));
    assert(test_with_epsilon(sub(20f64, 5f64, 2f64), 13f64));
    assert(test_with_epsilon(mul(20f64, 5f64, 2f64), 200f64));
    assert(test_with_epsilon(div(20f64, 5f64, 2f64), 2f64));

    assert(neg(20f64) == -20f64);
    assert(neg(-5f64) == 5f64);

    assert(eq(20f64, 5f64).not);
    assert(eq(5f64, 5f64));
    assert(eq(5f64, 20f64).not);

    assert(ne(20f64, 5f64));
    assert(ne(5f64, 5f64).not);
    assert(ne(5f64, 20f64));


    assert(lt(20f64, 5f64).not);
    assert(lt(5f64, 5f64).not);
    assert(lt(5f64, 20f64));

    assert(le(20f64, 5f64).not);
    assert(le(5f64, 5f64));
    assert(le(5f64, 20f64));

    assert(ge(20f64, 5f64));
    assert(ge(5f64, 5f64));
    assert(ge(5f64, 20f64).not);

    assert(gt(20f64, 5f64));
    assert(gt(5f64, 5f64).not);
    assert(gt(5f64, 20f64).not);
}

fun test_with_epsilon(expected: Float64, value: Float64): Bool {
    let epsilon = 0.01f64;
    return value >= (expected-epsilon) && value <= (expected+epsilon);
}

fun add(x: Float64, y: Float64, z: Float64): Float64 {
    return x+y+z;
}

fun sub(x: Float64, y: Float64, z: Float64): Float64 {
    return x-y-z;
}

fun mul(x: Float64, y: Float64, z: Float64): Float64 {
    return x*y*z;
}

fun div(x: Float64, y: Float64, z: Float64): Float64 {
    return x/y/z;
}

fun eq(x: Float64, y: Float64): Bool {
    return x == y;
}

fun ne(x: Float64, y: Float64): Bool {
    return x != y;
}

fun lt(x: Float64, y: Float64): Bool {
    return x < y;
}

fun le(x: Float64, y: Float64): Bool {
    return x <= y;
}

fun ge(x: Float64, y: Float64): Bool {
    return x >= y;
}

fun gt(x: Float64, y: Float64): Bool {
    return x > y;
}

fun neg(x: Float64): Float64 {
    return -x;
}