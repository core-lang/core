fun main() {
  assert(foo_bool() == false);
  assert(foo_byte() == 6u8);
  assert(foo_char() == '6');
  assert(foo_int32() == 6i32);
  assert(foo_long() == 6i64);
  assert(foo_float() == 6f32);
  assert(foo_double() == 6f64);
  assert(foo_string() == "33");
}

fun foo_bool(): Bool {
  return bar_bool(true);
}

fun bar_bool(a: Bool): Bool {
  assert(a == true);
  return a.not();
}

fun foo_byte(): UInt8 {
  return bar_byte(3u8);
}

fun bar_byte(a: UInt8): UInt8 {
  assert(a == 3u8);
  return (3i32+a.toInt32()).toUInt8();
}

fun foo_char(): Char {
  return bar_char('3');
}

fun bar_char(a: Char): Char {
  assert(a == '3');
  return (3i32+a.toInt32()).toChar().getOrPanic();
}

fun foo_int32(): Int32 {
  return bar_int32(3i32);
}

fun bar_int32(a: Int32): Int32 {
  assert(a == 3i32);
  return 3i32+a;
}

fun foo_long(): Int64 {
  return bar_long(3i64);
}

fun bar_long(a: Int64): Int64 {
  assert(a == 3i64);
  return 3i64+a;
}

fun foo_float(): Float32 {
  return bar_float(3f32);
}

fun bar_float(a: Float32): Float32 {
  assert(a == 3f32);
  return 3f32+a;
}

fun foo_double(): Float64 {
  return bar_double(3f64);
}

fun bar_double(a: Float64): Float64 {
  assert(a == 3f64);
  return 3f64+a;
}

fun foo_string(): String {
  return bar_string("3");
}

fun bar_string(a: String): String {
  assert(a == "3");
  return "3"+a;
}
