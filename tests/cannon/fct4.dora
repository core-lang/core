fn main() {
  let foo = Foo();
  assert(foo.foo_bool() == false);
  assert(foo.foo_byte() == 6u8);
  assert(foo.foo_char() == '6');
  assert(foo.foo_int32() == 6i32);
  assert(foo.foo_int64() == 6i64);
  assert(foo.foo_float() == 6f32);
  assert(foo.foo_double() == 6f64);
  assert(foo.foo_string() == "33");
}

class Foo

impl Foo {
  fn foo_bool(): Bool {
    return self.bar_bool(true);
  }
  fn bar_bool(a: Bool): Bool {
    assert(a == true);
    return a.not();
  }

  fn foo_byte(): UInt8 {
    return self.bar_byte(3u8);
  }

  fn bar_byte(a: UInt8): UInt8 {
    assert(a == 3u8);
    return (3i32+a.toInt32()).toUInt8();
  }

  fn foo_char(): Char {
    return self.bar_char('3');
  }

  fn bar_char(a: Char): Char {
    assert(a == '3');
    return (3i32+a.toInt32()).toChar().getOrPanic();
  }

  fn foo_int32(): Int32 {
    return self.bar_int32(3i32);
  }

  fn bar_int32(a: Int32): Int32 {
    assert(a == 3i32);
    return 3i32+a;
  }

  fn foo_int64(): Int64 {
    return self.bar_int64(3i64);
  }

  fn bar_int64(a: Int64): Int64 {
    assert(a == 3i64);
    return 3i64+a;
  }

  fn foo_float(): Float32 {
    return self.bar_float(3f32);
  }

  fn bar_float(a: Float32): Float32 {
    assert(a == 3f32);
    return 3f32+a;
  }

  fn foo_double(): Float64 {
    return self.bar_double(3f64);
  }

  fn bar_double(a: Float64): Float64 {
    assert(a == 3f64);
    return 3f64+a;
  }

  fn foo_string(): String {
    return self.bar_string("3");
  }

  fn bar_string(a: String): String {
    assert(a == "3");
    return "3"+a;
  }
}