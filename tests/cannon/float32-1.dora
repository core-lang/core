fun main() {
    assert(test_with_epsilon(add(20f32, 5f32, 2f32), 27f32));
    assert(test_with_epsilon(sub(20f32, 5f32, 2f32), 13f32));
    assert(test_with_epsilon(mul(20f32, 5f32, 2f32), 200f32));
    assert(test_with_epsilon(div(20f32, 5f32, 2f32), 2f32));

    assert(neg(20f32) == -20f32);
    assert(neg(-5f32) == 5f32);

    assert(eq(20f32, 5f32).not());
    assert(eq(5f32, 5f32));
    assert(eq(5f32, 20f32).not());

    assert(ne(20f32, 5f32));
    assert(ne(5f32, 5f32).not());
    assert(ne(5f32, 20f32));


    assert(lt(20f32, 5f32).not());
    assert(lt(5f32, 5f32).not());
    assert(lt(5f32, 20f32));

    assert(le(20f32, 5f32).not());
    assert(le(5f32, 5f32));
    assert(le(5f32, 20f32));

    assert(ge(20f32, 5f32));
    assert(ge(5f32, 5f32));
    assert(ge(5f32, 20f32).not());

    assert(gt(20f32, 5f32));
    assert(gt(5f32, 5f32).not());
    assert(gt(5f32, 20f32).not());
}

fun test_with_epsilon(expected: Float32, value: Float32): Bool {
    let epsilon = 0.01f32;
    return value >= (expected-epsilon) && value <= (expected+epsilon);
}

fun add(x: Float32, y: Float32, z: Float32): Float32 {
    return x+y+z;
}

fun sub(x: Float32, y: Float32, z: Float32): Float32 {
    return x-y-z;
}

fun mul(x: Float32, y: Float32, z: Float32): Float32 {
    return x*y*z;
}

fun div(x: Float32, y: Float32, z: Float32): Float32 {
    return x/y/z;
}

fun eq(x: Float32, y: Float32): Bool {
    return x == y;
}

fun ne(x: Float32, y: Float32): Bool {
    return x != y;
}

fun lt(x: Float32, y: Float32): Bool {
    return x < y;
}

fun le(x: Float32, y: Float32): Bool {
    return x <= y;
}

fun ge(x: Float32, y: Float32): Bool {
    return x >= y;
}

fun gt(x: Float32, y: Float32): Bool {
    return x > y;
}

fun neg(x: Float32): Float32 {
    return -x;
}