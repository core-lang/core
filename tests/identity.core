fun main(): Unit {
    let b1 = 1.toUInt8;
    let b2 = 2.toUInt8;
    assert(b1 === b1);
    assert(b1 !== b2);

    let i1 = 1i32;
    let i2 = 2i32;
    assert(i1 === i1);
    assert(i1 !== i2);

    let l1 = 1i64;
    let l2 = 2i64;
    assert(l1 === l1);
    assert(l1 !== l2);

    let f1 = 1.0f32;
    let f2 = 2.0f32;
    assert(f1 === f1);
    assert(f1 !== f2);
    assert(0.0f32 !== -0.0f32);
    assert(0.0f32/0.0f32 === 0.0f32/0.0f32);

    let d1 = 1.0;
    let d2 = 2.0;
    assert(d1 === d1);
    assert(d1 !== d2);
    assert(0.0 !== -0.0);
    assert(0.0/0.0 === 0.0/0.0);

    let f1 = Foo(1i32);
    let f2 = Foo(2i32);
    assert(f1 === f1);
    assert(f1 !== f2);

    assert(bar[Int32](1i32, 1i32));
    assert(bar[Int32](1i32, 2i32).not);

    assert(bar[Float64](1.0, 1.0));
    assert(bar[Float64](1.0, 2.0).not);
    assert(bar[Float64](0.0, (-0.0)).not);
    assert(bar[Float64](0.0/0.0, 0.0/0.0));

    assert(bar[Foo](f1, f1));
    assert(bar[Foo](f1, Foo(1i32)).not);
    assert(bar[Foo](f1, f2).not);
}

class Foo(i: Int32)

fun bar[T](a: T, b: T): Bool {
    return a === b;
}