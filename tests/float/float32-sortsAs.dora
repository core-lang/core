import std::Assert;

fun main() {
  Assert.equal[Int32](0.0F.sortsAs(0.0F), 0I);
  Assert.equal[Int32]((-0.0F).sortsAs(-0.0F), 0I);
  Assert.equal[Int32](1.0F.sortsAs(1.0F), 0I);
  Assert.equal[Int32](0.0F.sortsAs(1.0F), -1I);
  Assert.equal[Int32](1.0F.sortsAs(0.0F), 1I);
  Assert.equal[Int32]((-0.0F).sortsAs(0.0F), -1I);
  Assert.equal[Int32](0.0F.sortsAs(-0.0F), 1I);
  Assert.equal[Int32]((0.0F/0.0F).sortsAs(0.0F/0.0F), 0I);

  // 11111111110000000000000000000000
  let nanQuietNegative = (-4194304).asFloat32();
  // 11111111100000000000000000000001
  let nanSignaNegative = (-8388607).asFloat32();
  // 11111111100000000000000000000000
  let infNegative = (-8388608).asFloat32();
  // negative numbers
  // positive numbers
  // 01111111100000000000000000000000
  let infPositive = 2139095040.asFloat32();
  // 01111111100000000000000000000001
  let nanSignaPositive = 2139095041.asFloat32();
  // 01111111110000000000000000000000
  let nanQuietPositive = 2143289344.asFloat32();

  assert(nanQuietNegative.sortsAs(nanSignaNegative) == -1I);
  assert(nanSignaNegative.sortsAs(infNegative) == -1I);
  assert(infNegative.sortsAs(infPositive) == -1I);
  assert(infPositive.sortsAs(nanSignaPositive) == -1I);
  assert(nanSignaPositive.sortsAs(nanQuietPositive) == -1I);

  assert(nanQuietNegative.sortsAs(-1.0F) == -1I);
  assert(nanSignaNegative.sortsAs(-1.0F) == -1I);
  assert(infNegative.sortsAs(-1.0F) == -1I);
  assert(infPositive.sortsAs(-1.0F) == 1I);
  assert(nanSignaPositive.sortsAs(-1.0F) == 1I);

  assert(nanQuietNegative.sortsAs(1.0F) == -1I);
  assert(nanSignaNegative.sortsAs(1.0F) == -1I);
  assert(infNegative.sortsAs(1.0F) == -1I);
  assert(infPositive.sortsAs(1.0F) == 1I);
  assert(nanSignaPositive.sortsAs(1.0F) == 1I);

  // -qNaN  -sNaN  +sNaN  +qNaN
  assert(nanQuietNegative.sortsSame(nanQuietNegative));
  assert(nanQuietNegative.sortsBefore(nanSignaNegative));
  assert(nanQuietNegative.sortsBefore(nanSignaPositive));
  assert(nanQuietNegative.sortsBefore(nanQuietPositive));

  assert(nanSignaNegative.sortsAfter(nanQuietNegative));
  assert(nanSignaNegative.sortsSame(nanSignaNegative));
  assert(nanSignaNegative.sortsBefore(nanSignaPositive));
  assert(nanSignaNegative.sortsBefore(nanQuietPositive));

  assert(nanSignaPositive.sortsAfter(nanQuietNegative));
  assert(nanSignaPositive.sortsAfter(nanSignaNegative));
  assert(nanSignaPositive.sortsSame(nanSignaPositive));
  assert(nanSignaPositive.sortsBefore(nanQuietPositive));

  assert(nanQuietPositive.sortsAfter(nanQuietNegative));
  assert(nanQuietPositive.sortsAfter(nanSignaNegative));
  assert(nanQuietPositive.sortsAfter(nanSignaPositive));
  assert(nanQuietPositive.sortsSame(nanQuietPositive));
}
