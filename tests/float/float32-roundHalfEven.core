fun main(): Unit {
  let x = Float32::infinityNegative.roundHalfEven;
  assert(x == Float32::infinityNegative);

  let x = (-2.5f32).roundHalfEven;
  assert(x == -2.0f32);

  let x = (-1.5f32).roundHalfEven;
  assert(x == -2.0f32);

  let x = (-2.5f32).roundHalfEven;
  assert(x == -2.0f32);

  let x = (-1.5f32).roundHalfEven;
  assert(x == -2.0f32);

  let x = (-1.23f32).roundHalfEven;
  assert(x == -1.0f32);

  let x = (-1.0f32).roundHalfEven;
  assert(x == -1.0f32);

  let x = (-0.0f32).roundHalfEven;
  assert(x == -0.0f32);

  let x = 0.0f32.roundHalfEven;
  assert(x == 0.0f32);

  let x = 1.0f32.roundHalfEven;
  assert(x == 1.0f32);

  let x = 1.23f32.roundHalfEven;
  assert(x == 1.0f32);

  let x = 1.5f32.roundHalfEven;
  assert(x == 2.0f32);

  let x = 2.5f32.roundHalfEven;
  assert(x == 2.0f32);

  let x = Float32::infinityPositive.roundHalfEven;
  assert(x == Float32::infinityPositive);

  let x = Float32::notANumber.roundHalfEven;
  assert(x.isNan);
}
