fun main(): Unit {
  assert(0.0f32.sortsAs(0.0f32) == 0i32);
  assert((-0.0f32).sortsAs(-0.0f32) == 0i32);
  assert(1.0f32.sortsAs(1.0f32) == 0i32);
  assert(0.0f32.sortsAs(1.0f32) == -1i32);
  assert(1.0f32.sortsAs(0.0f32) == 1i32);
  assert((-0.0f32).sortsAs(0.0f32) == -1i32);
  assert(0.0f32.sortsAs(-0.0f32) == 1i32);
  assert((0.0f32/0.0f32).sortsAs(0.0f32/0.0f32) == 0i32);

  // 11111111110000000000000000000000
  let nanQuietNegative = (-4194304i32).asFloat32();
  // 11111111100000000000000000000001
  let nanSignaNegative = (-8388607i32).asFloat32();
  // 11111111100000000000000000000000
  let infNegative = (-8388608i32).asFloat32();
  // negative numbers
  // positive numbers
  // 01111111100000000000000000000000
  let infPositive = 2139095040i32.asFloat32();
  // 01111111100000000000000000000001
  let nanSignaPositive = 2139095041i32.asFloat32();
  // 01111111110000000000000000000000
  let nanQuietPositive = 2143289344i32.asFloat32();

  assert(nanQuietNegative.sortsAs(nanSignaNegative) == -1i32);
  assert(nanSignaNegative.sortsAs(infNegative) == -1i32);
  assert(infNegative.sortsAs(infPositive) == -1i32);
  assert(infPositive.sortsAs(nanSignaPositive) == -1i32);
  assert(nanSignaPositive.sortsAs(nanQuietPositive) == -1i32);

  assert(nanQuietNegative.sortsAs(-1.0f32) == -1i32);
  assert(nanSignaNegative.sortsAs(-1.0f32) == -1i32);
  assert(infNegative.sortsAs(-1.0f32) == -1i32);
  assert(infPositive.sortsAs(-1.0f32) == 1i32);
  assert(nanSignaPositive.sortsAs(-1.0f32) == 1i32);

  assert(nanQuietNegative.sortsAs(1.0f32) == -1i32);
  assert(nanSignaNegative.sortsAs(1.0f32) == -1i32);
  assert(infNegative.sortsAs(1.0f32) == -1i32);
  assert(infPositive.sortsAs(1.0f32) == 1i32);
  assert(nanSignaPositive.sortsAs(1.0f32) == 1i32);

  // -qNaN  -sNaN  +sNaN  +qNaN
  assert(nanQuietNegative.sortsSame(nanQuietNegative));
  assert(nanQuietNegative.sortsBefore(nanSignaNegative));
  assert(nanQuietNegative.sortsBefore(nanSignaPositive));
  assert(nanQuietNegative.sortsBefore(nanQuietPositive));

  assert(nanSignaNegative.sortsAfter(nanQuietNegative));
  assert(nanSignaNegative.sortsSame(nanSignaNegative));
  assert(nanSignaNegative.sortsBefore(nanSignaPositive));
  assert(nanSignaNegative.sortsBefore(nanQuietPositive));

  assert(nanSignaPositive.sortsAfter(nanQuietNegative));
  assert(nanSignaPositive.sortsAfter(nanSignaNegative));
  assert(nanSignaPositive.sortsSame(nanSignaPositive));
  assert(nanSignaPositive.sortsBefore(nanQuietPositive));

  assert(nanQuietPositive.sortsAfter(nanQuietNegative));
  assert(nanQuietPositive.sortsAfter(nanSignaNegative));
  assert(nanQuietPositive.sortsAfter(nanSignaPositive));
  assert(nanQuietPositive.sortsSame(nanQuietPositive));
}
