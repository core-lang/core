//= vm-args "--gc-young-size=64M --max-heap-size=128M --gc-verify"

fun main(): Unit {
    let mut i = 0i32;

    while i < 4i32 {
        std::thread::spawn(||: Unit {
            allocator();
            println("done");
        });
        i = i + 1i32;
    }

    allocator();
    println("done");
}

fun allocator(): Unit {
    let mut i = 0i32;

    while i < 10'000i32 {
        let foo = {
            let v1 = Foo(i, None[Foo]);
            let v2 = Foo(i + 1i32, Some[Foo](v1));
            let v3 = Foo(i + 2i32, Some[Foo](v2));
            let v4 = Foo(i + 3i32, Some[Foo](v3));
            Foo(i + 4i32, Some[Foo](v4))
        };

        if i.remainder(500i32) == 0i32 { std::forceMinorCollect(); }

        let mut tmp = foo;
        assert(tmp.value == i + 4i32);
        tmp = tmp.next.getOrPanic();
        assert(tmp.value == i + 3i32);
        tmp = tmp.next.getOrPanic();
        assert(tmp.value == i + 2i32);
        tmp = tmp.next.getOrPanic();
        assert(tmp.value == i + 1i32);
        tmp = tmp.next.getOrPanic();
        assert(tmp.value == i);

        i = i + 1i32;
    }
}

class Foo(value: Int32, next: Option[Foo])