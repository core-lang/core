//= vm-args "--gc-young-size=64M --max-heap-size=128M --gc-verify"

class MyThread() extends std::Thread {
    @override fun run() {
        allocator();
        println("done");
    }
}

fun main() {
    var i = 0;

    while i < 4 {
        let thread = MyThread();
        thread.start();
        i = i + 1;
    }

    allocator();
    println("done");
}

fun allocator() {
    var i = 0;

    while i < 10_000 {
        let foo = {
            let v1 = Foo(i, None[Foo]);
            let v2 = Foo(i + 1, Some[Foo](v1));
            let v3 = Foo(i + 2, Some[Foo](v2));
            let v4 = Foo(i + 3, Some[Foo](v3));
            Foo(i + 4, Some[Foo](v4))
        };

        if i % 500 == 0 { std::forceMinorCollect(); }

        var tmp = foo;
        assert(tmp.value == i + 4);
        tmp = tmp.next.getOrPanic();
        assert(tmp.value == i + 3);
        tmp = tmp.next.getOrPanic();
        assert(tmp.value == i + 2);
        tmp = tmp.next.getOrPanic();
        assert(tmp.value == i + 1);
        tmp = tmp.next.getOrPanic();
        assert(tmp.value == i);

        i = i + 1;
    }
}

class Foo(let value: Int32, let next: Option[Foo])