//= stdout file

fun main(): Unit {
    let primes = sieve(100i64);
    var i = 0i64;

    while i < primes.size() {
        println(primes(i).toString());
        i = i + 1i64;
    }
}

fun sieve(limit: Int64): List[Int64] {
    let primes = List[Int64]::new();

    if limit >= 2i64 {
        let numbers = Array[Bool]::fill(limit+1i64, true);
        let sqrtLimit = limit.toFloat64().sqrt().toInt64();

        var factor = 2i64;

        while factor <= sqrtLimit {
            if numbers(factor) {
                var multiple = factor * factor;

                while multiple <= limit {
                    numbers(multiple) = false;
                    multiple = multiple + factor;
                }
            }

            factor = factor + 1i64;
        }

        var i = 0i64;

        while i <= limit {
            if i >= 2i64 && numbers(i) {
                primes.push(i);
            }

            i = i + 1i64;
        }
    }

    return primes;
}