//= output file

fun main() {
    let primes = sieve(100);
    var i = 0;

    while i < primes.length() {
        println(primes[i].toString());
        i = i + 1;
    }
}

fun sieve(limit: Int) -> Vec<Int> {
    let primes = Vec::<Int>();

    if limit >= 2 {
        let numbers = arrayFill::<Bool>(limit+1, true);
        let sqrtLimit = limit.toDouble().sqrt().toInt();

        var factor = 2;

        while factor <= sqrtLimit {
            if numbers[factor] {
                var multiple = factor * factor;

                while multiple <= limit {
                    numbers[multiple] = false;
                    multiple = multiple + factor;
                }
            }

            factor = factor + 1;
        }

        var i = 0;

        while i <= limit {
            if i >= 2 && numbers[i] {
                primes.push(i);
            }

            i = i + 1;
        }
    }

    return primes;
}