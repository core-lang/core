fun main(): Unit {
  int32();
  int64();
  float64();
}

fun int32(): Unit {
  let x = Array[Int32]::new(2i32, 3i32, 0i32, 4i32);
  Array[Int32]::sortStable(x);
  assert(x == Array[Int32]::new(0i32, 2i32, 3i32, 4i32));
}

fun int64(): Unit {
  let x = Array[Int64]::new(5i64, 1i64, 4i64, 2i64, 8i64);
  Array[Int64]::sortStable(x);
  assert(x == Array[Int64]::new(1i64, 2i64, 4i64, 5i64, 8i64));
}

fun float64(): Unit {
  // as x86 returns a negative NaN for 0.0/0.0, but Arm&RiscV return a positive NaN,
  // we need to make extra efforts to ensure the NaNs we are using have the desired signs.

  // expected order
  let nNaN = -(0.0/0.0).abs;
  let nInf = -1.0/0.0;
  let nOne = -1.0;
  let nZero = -0.0;
  let pZero = 0.0;
  let pOne = 1.0;
  let pInf= 1.0/0.0;
  let pNaN = (0.0/0.0).abs;

  let x = Array[Float64]::new(pOne, pInf, nInf, pNaN, nNaN, nZero, pZero, nOne);
  Array[Float64]::sortStable(x);
  assert(x(0i64) === nNaN);
  assert(x(1i64) === nInf);
  assert(x(2i64) === nOne);
  assert(x(3i64) === nZero);
  assert(x(4i64) === pZero);
  assert(x(5i64) === pOne);
  assert(x(6i64) === pInf);
  assert(x(7i64) === pNaN);
}
