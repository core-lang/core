fun main() {
  let x = Array[Int32]::new();
  assert(x.size() == 0i64);
  assert(int32_array_len(x) == 0i64);

  let x = Array[Int32]::fill(5i64, 100i32);
  assert(x.size() == 5i64);
  assert(int32_array_len(x) == 5i64);

  let x = Array[Int64]::new();
  assert(x.size() == 0i64);
  assert(int64_array_len(x) == 0i64);

  let x = Array[Int64]::fill(7i64, 100i64);
  assert(x.size() == 7i64);
  assert(int64_array_len(x) == 7i64);

  let x = Array[Float32]::new();
  assert(x.size() == 0i64);
  assert(float_array_len(x) == 0i64);

  let x = Array[Float32]::fill(6i64, 1.0f32);
  assert(x.size() == 6i64);
  assert(float_array_len(x) == 6i64);

  let x = Array[Float64]::new();
  assert(x.size() == 0i64);
  assert(double_array_len(x) == 0i64);

  let x = Array[Float64]::fill(4i64, 1.0);
  assert(x.size() == 4i64);
  assert(double_array_len(x) == 4i64);

  let x = Array[String]::new();
  assert(x.size() == 0i64);
  assert(str_array_len(x) == 0i64);

  let x = Array[String]::fill(3i64, "hello");
  assert(x.size() == 3i64);
  assert(str_array_len(x) == 3i64);

  let x = Array[Foo]::new();
  assert(x.size() == 0i64);
  assert(foo_array_len(x) == 0i64);

  let x = Array[Foo]::fill(1i64, Foo());
  assert(x.size() == 1i64);
  assert(foo_array_len(x) == 1i64);
}

fun int32_array_len(x: Array[Int32]): Int64 {
  return x.size();
}

fun int64_array_len(x: Array[Int64]): Int64 {
  return x.size();
}

fun float_array_len(x: Array[Float32]): Int64 {
  return x.size();
}

fun double_array_len(x: Array[Float64]): Int64 {
  return x.size();
}

fun str_array_len(x: Array[String]): Int64 {
  return x.size();
}

fun foo_array_len(x: Array[Foo]): Int64 {
  return x.size();
}

class Foo
