fun main() {
    if argc() != 3 {
        println("usage: splay <seed> <tree-size> <iterations>");
        exit(1);
    }

    rnd = Random(argv(0).parseLong());
    splayTreeSize = argv(1).parseInt();
    let iterations = argv(2).parseInt();

    let bench = Benchmark();
    bench.setup();

    var i = 0;
    while i < iterations {
        bench.run();
        i = i + 1;
    }

    bench.tearDown();
}

var rnd: Random;

var splayTreeSize: Int;
const splayTreeModifications: Int = 1000;
const splayTreePayloadDepth: Int = 5;

class Benchmark {
    var splayTree: SplayTree;
    var splaySamples: Int;
    var splaySampleTimeStart: Long = 0L;
    var splaySumOfSquaredPauses: Long = 0L;

    fun setup() {
        self.splayTree = SplayTree(none[SplayNode]());

        var i = 0;

        while i < splayTreeSize {
            self.insertNewNode();

            if (i+1) % 20 == 19 {
                self.updateStats(timestamp());
            }

            i = i + 1;
        }
    }

    fun updateStats(time: Long) {
        let pause = time - self.splaySampleTimeStart;
        self.splaySampleTimeStart = time;
        self.splaySamples = self.splaySamples + 1;
        self.splaySumOfSquaredPauses = self.splaySumOfSquaredPauses + pause * pause;
    }

    fun tearDown() {
        let keys = self.splayTree.exportKeys();

        self.splaySamples = 0;
        self.splaySumOfSquaredPauses = 0L;

        var length = keys.length();

        if length != splayTreeSize {
            fatalError("Splay tree has wrong sie");
        }

        var i = 0;

        while i < length - 1 {
            if keys(i) >= keys(i+1) {
                fatalError("Splay tree not sorted");
            }

            i = i + 1;
        }
    }

    fun run() {
        var i = 0;

        while i < splayTreeModifications {
            let key = self.insertNewNode();
            let greatest = self.splayTree.findGreatestLessThan(key);

            if greatest.isEmpty() {
                self.splayTree.remove(key);
            } else {
                self.splayTree.remove(greatest.value.key);
            }

            i = i + 1;
        }

        self.updateStats(timestamp());
    }

    fun insertNewNode() -> Int {
        var key: Int = 0;

        loop {
            key = self.generateKey();

            if self.splayTree.find(key).isEmpty() {
                break;
            }
        }

        let payload = generatePayloadTree(splayTreePayloadDepth, key.toString());
        self.splayTree.insert(key, payload);

        return key;
    }

    fun generateKey() -> Int {
        return rnd.nextInt();
    }

    fun rms() {
        let pauses = self.splaySumOfSquaredPauses;
        let samples = self.splaySamples;

        (pauses.toDouble() / samples.toDouble());
    }
}

fun generatePayloadTree(depth: Int, tag: String) -> PayloadNode {
    if depth == 0 {
        let arr = Array[Int](10);
        var i = 0;

        while i < 10 {
            arr(i) = i;
            i = i + 1;
        }

        let text = "String for key " + tag + " in leaf node";
        return PayloadNode(arr, text, none[PayloadNode](), none[PayloadNode]());
    } else {
        return PayloadNode(
            arrayEmpty[Int](),
            "",
            some[PayloadNode](generatePayloadTree(depth-1, tag)),
            some[PayloadNode](generatePayloadTree(depth-1, tag)),
        );
    }
}

class SplayTree(var root: Option[SplayNode]) {

    fun isEmpty() -> Bool {
        return self.root.isEmpty();
    }

    fun insert(key: Int, value: PayloadNode) {
        if self.isEmpty() {
            self.root = some[SplayNode](SplayNode(key, some[PayloadNode](value)));
            return;
        }

        self.splay(key);

        if self.root.value.key == key {
            return;
        }

        let node = SplayNode(key, some[PayloadNode](value));

        if key > self.root.value.key {
            node.left = self.root;
            node.right = self.root.value.right;
            self.root.value.right = none[SplayNode]();

        } else {
            node.right = self.root;
            node.left = self.root.value.left;
            self.root.value.left = none[SplayNode]();
        }

        self.root = some[SplayNode](node);
    }

    fun remove(key: Int) -> Option[SplayNode] {
        if self.isEmpty() {
            return none[SplayNode]();
        }

        self.splay(key);

        if self.root.value.key != key {
            return none[SplayNode]();
        }

        let removed = self.root;

        if self.root.value.left.isEmpty() {
            self.root = self.root.value.right;
        } else {
            let right = self.root.value.right;
            self.root = none[SplayNode]();
            self.splay(key);
            self.root.value.right = right;
        }

        return removed;
    }

    fun find(key: Int) -> Option[SplayNode] {
        if self.isEmpty() {
            return none[SplayNode]();
        }

        self.splay(key);

        if self.root.value.key == key {
            return self.root;
        } else {
            return none[SplayNode]();
        }
    }

    fun findMax(startNode: Option[SplayNode]) -> Option[SplayNode] {
        if self.isEmpty() {
            return none[SplayNode]();
        }

        var current = startNode;

        if current.isEmpty() {
            current = self.root;
        }

        while current.value.right.isPresent {
            current = current.value.right;
        }

        return current;
    }

    fun findGreatestLessThan(key: Int) -> Option[SplayNode] {
        if self.isEmpty() {
            return none[SplayNode]();
        }

        self.splay(key);

        if self.root.value.key < key {
            return self.root;
        } else if self.root.value.left.isPresent {
            return self.findMax(self.root.value.left);
        } else {
            return none[SplayNode]();
        }
    }

    fun exportKeys() -> Vec[Int] {
        let keys = Vec[Int]();
        exportKeysTraverse(keys, self.root);
        return keys;
    }

    fun splay(key: Int) {
        if self.isEmpty() {
            return;
        }

        var dummy = SplayNode(0, none[PayloadNode]());
        var left = dummy;
        var right = dummy;

        var current: Option[SplayNode] = self.root;

        loop {
            if key < current.value.key {
                if current.value.left.isEmpty() {
                    break;
                }

                if key < current.value.left.value.key {
                    // Rotate right
                    let tmp = current.value.left;
                    current.value.left = tmp.value.right;
                    tmp.value.right = current;
                    current = tmp;

                    if current.value.left.isEmpty() {
                        break;
                    }
                }

                // Link right
                right.left = current;
                right = current.value;
                current = current.value.left;
            } else if key > current.value.key {
                if current.value.right.isEmpty() {
                    break;
                }

                if key > current.value.right.value.key {
                    // Rotate left
                    let tmp = current.value.right;
                    current.value.right = tmp.value.left;
                    tmp.value.left = current;
                    current = tmp;

                    if current.value.right.isEmpty() {
                        break;
                    }
                }

                // Link left
                left.right = current;
                left = current.value;
                current = current.value.right;
            } else {
                break;
            }
        }

        // Assemble
        left.right = current.value.left;
        right.left = current.value.right;
        current.value.left = dummy.right;
        current.value.right = dummy.left;
        self.root = current;
    }
}

fun exportKeysTraverse(list: Vec[Int], node: Option[SplayNode]) {
    var current = node;

    while current.isPresent {
        var left = current.value.left;
        if left.isPresent {
            exportKeysTraverse(list, left);
        }
        list.push(current.value.key);
        current = current.value.right;
    }
}

class SplayNode(var key: Int, var value: Option[PayloadNode]) {
    var left: Option[SplayNode];
    var right: Option[SplayNode];
}

class PayloadNode(let array: Array[Int], let text: String, let left: Option[PayloadNode], let right: Option[PayloadNode])
