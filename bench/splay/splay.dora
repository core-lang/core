use std::fatalError;
use std::timestamp;

fun main(): Unit {
    if std::argc() != 3i32 {
        println("usage: splay <seed> <tree-size> <iterations>");
        std::exit(1i32);
    }

    rnd = std::Random::new(std::argv(0i32).toInt64().getOrPanic());
    splayTreeSize = std::argv(1i32).toInt32().getOrPanic();
    let iterations = std::argv(2i32).toInt32().getOrPanic();

    let bench = Benchmark::new();
    bench.setup();

    var i = 0i32;
    while i < iterations {
        bench.run();
        i = i + 1i32;
    }

    bench.tearDown();
}

var rnd: std::Random = std::Random::new(0i64);

var splayTreeSize: Int32 = 0i32;
const splayTreeModifications: Int32 = 1000i32;
const splayTreePayloadDepth: Int32 = 5i32;

class Benchmark {
    splayTree: SplayTree,
    splaySamples: Int32,
    splaySampleTimeStart: Int64,
    splaySumOfSquaredPauses: Int64,
}

impl Benchmark {
    @static fun new(): Benchmark {
        Benchmark(
            SplayTree::new(),
            0i32,
            0,
            0,
        )
    }

    fun setup(): Unit {
        var i = 0i32;
        self.splaySampleTimeStart = timestamp();

        while i < splayTreeSize {
            self.insertNewNode();

            if (i+1i32).remainder(20i32) == 19i32 {
                // self.updateStats(timestamp());
            }

            i = i + 1i32;
        }
    }

    fun updateStats(time: Int64): Unit {
        let pause = time - self.splaySampleTimeStart;
        self.splaySampleTimeStart = time;
        self.splaySamples = self.splaySamples + 1i32;
        self.splaySumOfSquaredPauses = self.splaySumOfSquaredPauses + pause * pause;
    }

    fun tearDown(): Unit {
        let keys = self.splayTree.exportKeys();

        self.splaySamples = 0i32;
        self.splaySumOfSquaredPauses = 0i64;

        var length = keys.size();

        if length != splayTreeSize.toInt64() {
            fatalError("Splay tree has wrong sie");
        }

        var i = 0i64;

        while i < length - 1i64 {
            if keys(i) >= keys(i+1i64) {
                fatalError("Splay tree not sorted");
            }

            i = i + 1i64;
        }
    }

    fun run(): Unit {
        var i = 0i32;

        while i < splayTreeModifications {
            let key = self.insertNewNode();
            let greatest = self.splayTree.findGreatestLessThan(key);

            if greatest.isNone() {
                self.splayTree.remove(key);
            } else {
                self.splayTree.remove(greatest.getOrPanic().key);
            }

            i = i + 1i32;
        }

        // self.updateStats(timestamp());
    }

    fun insertNewNode(): Int32 {
        var key: Int32 = 0i32;

        var continue = true;
        while continue {
            key = self.generateKey();

            if self.splayTree.find(key).isNone() {
                continue = false;
            }
        }

        let payload = generatePayloadTree(splayTreePayloadDepth, key.toString());
        self.splayTree.insert(key, payload);

        return key;
    }

    fun generateKey(): Int32 {
        return rnd.nextInt32();
    }

    fun rms(): Unit {
        let pauses = self.splaySumOfSquaredPauses;
        let samples = self.splaySamples;

        (pauses.toFloat64() / samples.toFloat64());
    }
}

fun generatePayloadTree(depth: Int32, tag: String): PayloadNode =
    if depth == 0i32 {
        let arr = Array[Int32]::zero(10i64);
        var i = 0i32;

        while i < 10i32 {
            arr(i.toInt64()) = i;
            i = i + 1i32;
        }

        let text = "String for key " + tag + " in leaf node";
        PayloadNode(Option[Array[Int32]]::Some(arr), text, Option[PayloadNode]::None, Option[PayloadNode]::None)
    } else {
        PayloadNode(
            Option[Array[Int32]]::None,
            "",
            Option[PayloadNode]::Some(generatePayloadTree(depth-1i32, tag)),
            Option[PayloadNode]::Some(generatePayloadTree(depth-1i32, tag)))
    };

class SplayTree {
    root: Option[SplayNode],
}

impl SplayTree {
    @static fun new(): SplayTree {
        SplayTree(None[SplayNode])
    }

    fun isEmpty(): Bool {
        return self.root.isNone();
    }

    fun insert(key: Int32, value: PayloadNode): Unit {
        if self.isEmpty() {
            self.root = Some(SplayNode::new(key, Some[PayloadNode](value)));
            return;
        }

        self.splay(key);

        let root = self.root.getOrPanic();

        if root.key == key {
            return;
        }

        let node = SplayNode::new(key, Some[PayloadNode](value));

        if key > root.key {
            node.left = self.root;
            node.right = root.right;
            root.right = None;

        } else {
            node.right = self.root;
            node.left = root.left;
            root.left = None;
        }

        self.root = Some(node);
    }

    fun remove(key: Int32): Option[SplayNode] {
        if self.isEmpty() {
            return Option[SplayNode]::None;
        }

        self.splay(key);
        let root = self.root.getOrPanic();

        if root.key != key {
            return None;
        }

        let removed = self.root;

        if root.left.isNone() {
            self.root = root.right;
        } else {
            let right = root.right;
            self.root = root.left;
            self.splay(key);
            self.root.getOrPanic().right = right;
        }

        return removed;
    }

    fun find(key: Int32): Option[SplayNode] {
        if self.isEmpty() {
            return None;
        }

        self.splay(key);
        let root = self.root.getOrPanic();

        if root.key == key {
            self.root
        } else {
            None[SplayNode]
        }
    }

    fun findMax(startNode: Option[SplayNode]): Option[SplayNode] {
        if self.isEmpty() {
            return None;
        }

        var current = if startNode.isNone() {
            self.root.getOrPanic()
        } else {
            startNode.getOrPanic()
        };

        while current.right.isSome() {
            current = current.right.getOrPanic();
        }

        Some(current)
    }

    fun findGreatestLessThan(key: Int32): Option[SplayNode] {
        if self.isEmpty() {
            return None;
        }

        self.splay(key);
        let root = self.root.getOrPanic();

        if root.key < key {
            self.root
        } else if root.left.isSome() {
            self.findMax(root.left)
        } else {
            None[SplayNode]
        }
    }

    fun exportKeys(): List[Int32] {
        let keys = List[Int32]::new();
        exportKeysTraverse(keys, self.root);
        return keys;
    }

    fun splay(key: Int32): Unit {
        if self.isEmpty() {
            return;
        }

        var dummy = SplayNode::new(0i32, Option[PayloadNode]::None);
        var left = dummy;
        var right = dummy;

        var current = self.root.getOrPanic();

        var continue = true;
        while continue {
            if key
            ... < current.key {
                if current.left
                ... .isNone() {
                    continue = false;
                }
                ... .getOrPanic().key > key {
                    // Rotate right
                    let tmp = current.left.getOrPanic();
                    current.left = tmp.right;
                    tmp.right = Some[SplayNode](current);
                    current = tmp;

                    if current.left.isNone() {
                        continue = false;
                    }
                }
                else {}
                if continue {
                    // Link right
                    right.left = Some[SplayNode](current);
                    right = current;
                    current = current.left.getOrPanic();
                }
            }
            ... > current.key {
                if current.right.isNone() {
                    continue = false;
                }
                if continue {
                    if key > current.right.getOrPanic().key {
                        // Rotate left
                        let tmp = current.right.getOrPanic();
                        current.right = tmp.left;
                        tmp.left = Some(current);
                        current = tmp;

                        if current.right.isNone() {
                            continue = false;
                        }
                    }

                    if continue {
                        // Link left
                        left.right = Some(current);
                        left = current;
                        current = current.right.getOrPanic();
                    }
                }
            }
            else { continue = false; }
        }

        // Assemble
        left.right = current.left;
        right.left = current.right;
        current.left = dummy.right;
        current.right = dummy.left;
        self.root = Some(current);
    }
}

fun exportKeysTraverse(list: List[Int32], node: Option[SplayNode]): Unit {
    var current = node;

    while current.isSome() {
        let c = current.getOrPanic();
        var left = c.left;
        if left.isSome() {
            exportKeysTraverse(list, left);
        }
        list.push(c.key);
        current = c.right;
    }
}

class SplayNode {
    key: Int32,
    value: Option[PayloadNode],
    left: Option[SplayNode],
    right: Option[SplayNode],
}

impl SplayNode {
    @static fun new(key: Int32, value: Option[PayloadNode]): SplayNode {
        SplayNode(key, value, None[SplayNode], None[SplayNode])
    }
}

class PayloadNode {
    array: Option[Array[Int32]],
    text: String,
    left: Option[PayloadNode],
    right: Option[PayloadNode],
}
