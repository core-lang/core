class TreeNode(var left: Option[TreeNode], var right: Option[TreeNode], var value: Int32)

const MEG: Int32 = 1_000_000;
const INSIGNIFICANT: Int64 = 999L;
const BYTES_PER_WORD: Int32 = 8;
const BYTES_PER_NODE: Int32 = 40;
const WORDS_DEAD: Int32 = 100;

const treeHeight: Int32 = 14;
var treeSize: Int64 = 0L;

var youngBytes: Int64 = 0L;
var nodes: Int64 = 0L;
var actuallyMut: Int64 = 0L;
var mutatorSum: Int64 = 0L;
var aexport: Array[Int64] = Array[Int64]::empty();

var trees: Array[TreeNode] = Array[TreeNode]::empty();
var where: Int32 = 0;
var rnd: std::Random = std::Random(0L);

var size: Int32 = 0;
var workUnits: Int32 = 0;
var promoteRate: Int32 = 0;
var ptrMutRate: Int32 = 0;
var steps: Int32 = 0;

fun height(t: Option[TreeNode]): Int32 {
    if t.isNone() {
        return 0;
    } else {
        return 1 + Int32::max(height(t.getOrPanic().left), height(t.getOrPanic().right));
    }
}

fun shortestPath(t: Option[TreeNode]): Int32 {
    if t.isNone() {
        return 0;
    } else {
        return 1 + Int32::min(shortestPath(t.getOrPanic().left), shortestPath(t.getOrPanic().right));
    }
}

fun heightToNodes(h: Int32): Int64 {
    var h = h;
    if (h == 0) {
        return 0L;
    }

    var n: Int64 = 1L;

    while h > 1 {
        n = n + n;
        h = h - 1;
    }

    return n + n - 1L;
}

fun heightToBytes(h: Int32): Int64 {
    return BYTES_PER_NODE.toInt64() * heightToNodes(h);
}

fun nodesToHeight(nnodes: Int64): Int32 {
    var h = 1;
    var n = 1L;

    while n + n - 1L <= nnodes {
        n = n + n;
        h = h + 1;
    }

    return h - 1;
}

fun bytesToHeight(bytes: Int64): Int32 {
    return nodesToHeight(bytes / BYTES_PER_NODE.toInt64());
}

fun makeTree(h: Int32): TreeNode {
    let res = TreeNode(Option[TreeNode]::None, Option[TreeNode]::None, 0);
    nodes = nodes + 1L;
    if h > 1 {
        res.left = Option[TreeNode]::Some(makeTree(h-1));
        res.right = Option[TreeNode]::Some(makeTree(h-1));
    }
    res.value = h;
    res
}

fun initialize() {
    let ntrees = (size * MEG).toInt64() / treeSize;
    let default = TreeNode(Option[TreeNode]::None, Option[TreeNode]::None, 0);
    trees = Array[TreeNode]::fill(ntrees, default);

    println("Allocating " + ntrees.toString() + " trees.");
    println("  (" + (ntrees * treeSize).toString() + " bytes)");

    var i = 0L;

    while i < ntrees {
        trees(i) = makeTree(treeHeight);
        i = i + 1L;
    }

    println("  (" + nodes.toString() + " nodes)");
}

fun checkTrees() {
    let ntrees = trees.size();

    var i = 0L;

    while i < ntrees {
        let t = trees(i);

        let h1 = height(Option[TreeNode]::Some(t));
        let h2 = shortestPath(Option[TreeNode]::Some(t));

        if (h1 != treeHeight) || (h2 != treeHeight) {
            println("**** BUG: " + h1.toString() + " " + h2.toString());
        }

        i = i + 1L;
    }
}

fun replaceTreeWork(full: TreeNode, partial: TreeNode, dir: Bool) {
    let canGoLeft = full.left.isSome() && full.left.getOrPanic().value > partial.value;
    let canGoRight = full.right.isSome() && full.right.getOrPanic().value > partial.value;

    if canGoLeft && canGoRight {
        if dir {
            replaceTreeWork(full.left.getOrPanic(), partial, !dir);
        } else {
            replaceTreeWork(full.right.getOrPanic(), partial, !dir);
        }
    } else if !canGoLeft && !canGoRight {
        if dir {
            full.left = Option[TreeNode]::Some(partial);
        } else {
            full.right = Option[TreeNode]::Some(partial);
        }
    } else if !canGoLeft {
        full.left = Option[TreeNode]::Some(partial);
    } else {
        full.right = Option[TreeNode]::Some(partial);
    }
}

fun replaceTree(full: TreeNode, partial: TreeNode) {
    let dir = (partial.value % 2) == 0;
    actuallyMut = actuallyMut + 1L;
    replaceTreeWork(full, partial, dir);
}

fun oldGenAlloc(n: Int64) {
    let full = n / treeSize;
    var partial = n % treeSize;

    var i = 0L;
    while i < full {
        trees(where.toInt64()) = makeTree(treeHeight);
        where = where + 1;

        if where.toInt64() == trees.size() {
            where = 0;
        }

        i = i + 1L;
    }

    while partial > INSIGNIFICANT {
        let h = bytesToHeight(partial);
        let newTree = makeTree(h);
        replaceTree(trees(where.toInt64()), newTree);
        where = where + 1;

        if where.toInt64() == trees.size() {
            where = 0;
        }

        partial = partial - heightToBytes(h);
    }
}

fun oldGenSwapSubtrees() {
    let index1 = rnd.nextInt32WithBound(trees.size().toInt32());
    let index2 = rnd.nextInt32WithBound(trees.size().toInt32());
    let depth = rnd.nextInt32WithBound(treeHeight);
    var path = rnd.nextInt32();

    var tn1 = trees(index1.toInt64());
    var tn2 = trees(index2.toInt64());

    var i = 0;

    while i < depth {
        if (path & 1) == 0 {
            tn1 = tn1.left.getOrPanic();
            tn2 = tn2.left.getOrPanic();
        } else {
            tn1 = tn1.right.getOrPanic();
            tn2 = tn2.right.getOrPanic();
        }

        path = path >> 1;
        i = i + 1;
    }

    if (path & 1) == 0 {
        let tmp = tn1.left;
        tn1.left = tn2.left;
        tn2.left = tmp;
    } else {
        let tmp = tn1.right;
        tn1.right = tn2.right;
        tn2.right = tmp;
    }
    actuallyMut = actuallyMut + 2L;
}

fun oldGenMut(n: Int64) {
    var i = 0L;

    while i < n/2L {
        oldGenSwapSubtrees();
        i = i + 1L;
    }
}

fun doMutWork(n: Int64) {
    var sum = 0;
    let limit = workUnits.toInt64() * n / 10L;

    var k = 0L;

    while k < limit {
        sum = sum + 1;
        k = k + 1L;
    }

    mutatorSum = mutatorSum + sum.toInt64();
}

fun doYoungGenAlloc(n: Int64, nwords: Int32) {
    let nbytes = nwords * BYTES_PER_WORD;
    var allocated = 0L;

    while allocated < n {
        aexport = Array[Int64]::zero(nwords.toInt64());
        allocated = allocated + nbytes.toInt64();
    }

    youngBytes = youngBytes + allocated;
}

fun doStep(n: Int64) {
    let mutations = actuallyMut;

    doYoungGenAlloc(n, WORDS_DEAD);
    doMutWork(n);
    oldGenAlloc(n / promoteRate.toInt64());
    oldGenMut(Int64::max(0L, (mutations + ptrMutRate.toInt64()) - actuallyMut));
}

fun main() {
    rnd = std::Random(1234567890L);

    if std::argc() != 5 {
        println("Usage: java GCOld <size> <work> <ratio> <mutation> <steps>");
        println("  where <size> is the live storage in megabytes");
        println("        <work> is the mutator work per step (arbitrary units)");
        println("        <ratio> is the ratio of short-lived to long-lived allocation");
        println("        <mutation> is the mutations per step");
        println("        <steps> is the number of steps");
        std::exit(1);
    }

    treeSize = heightToBytes(treeHeight);

    size = std::argv(0).toInt32().getOrPanic();
    workUnits = std::argv(1).toInt32().getOrPanic();
    promoteRate = std::argv(2).toInt32().getOrPanic();
    ptrMutRate = std::argv(3).toInt32().getOrPanic();
    steps = std::argv(4).toInt32().getOrPanic();

    println("GCOld: version 1.0");
    println(size.toString() + " megabytes of live storage");
    println(workUnits.toString() + " work units per step");
    println("promotion ratio is 1:" + promoteRate.toString());
    println("pointer mutation rate is " + ptrMutRate.toString());
    println(steps.toString() + " steps");

    initialize();
    checkTrees();
    youngBytes = 0L;
    nodes = 0L;

    println("Initialization complete...");

    let start = std::timestamp();

    var step = 0;

    while step < steps {
        doStep(MEG.toInt64());
        step = step + 1;
    }

    let end = std::timestamp();
    let secs = (end - start).toFloat32() / 1000.0F / 1000.0F / 1000.0F;

    checkTrees();

    println("\nTook " + secs.toString() + " sec in steady state.");
    println("Allocated " + steps.toString() + " Mb of young gen garabge"
            + " (= " + (steps.toFloat32() / secs).toString() + " Mb/sec)");
    println("    (actually allocated "
            + (youngBytes.toFloat32() / MEG.toFloat32()).toString() + " megabytes)");
    let promoted = steps.toFloat32() / promoteRate.toFloat32();
    println("Promoted " + promoted.toString()
            + " Mb (= " + (promoted / secs).toString() + " Mb/sec)");
    println("    (actually promoted " + ((nodes * BYTES_PER_NODE.toInt64()).toFloat32() / MEG.toFloat32()).toString() + " megabytes)");

    if ptrMutRate != 0 {
        println("Mutated " + actuallyMut.toString() +
                " pointers (= " + (actuallyMut.toFloat32() / secs).toString() + " ptrs/sec)");
    }

    println("Checksum = " + (mutatorSum + aexport.size()).toString());
}
