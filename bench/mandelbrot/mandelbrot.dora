fn main() {
    Mandelbrot(argv(0).toInt().getOrPanic()).compute();
}

const BUFFER_SIZE: Int = 8192;

class Mandelbrot(let size: Int) {
    let fac: Float64 = 2.0 / size.toFloat64();
    let mut shift: Int = 0;
    let buf: Array[Byte] = Array[Byte](BUFFER_SIZE);
    let mut bufferLen: Int;

    if size % 8 == 0 {
        self.shift = 0;
    } else {
        self.shift = (8 - size % 8);
    }
    
    fn compute() {
        let mut y = 0;

        println("P4");
        let s = self.size.toString();
        println(s + " " + s);

        while y < self.size {
            self.computeRow(y);
            y = y + 1;
        }

        write(self.buf, 0, self.bufferLen);
    }

    fn computeRow(y: Int) {
        let mut bits = 0;
        let Ci = (y.toFloat64() * self.fac - 1.0);
        let bufferVar = self.buf;

        let mut x = 0;

        while x < self.size {
            let mut Zr = 0.0;
            let mut Zi = 0.0;
            let mut Cr = (x.toFloat64() * self.fac - 1.5);

            let mut i = 50;

            let mut ZrN = 0.0;
            let mut ZiN = 0.0;

            Zi = 2.0 * Zr * Zi + Ci;
            Zr = ZrN - ZiN + Cr;
            ZiN = Zi * Zi;
            ZrN = Zr * Zr;

            i = i - 1;

            while !(ZiN + ZrN > 4.0) && i > 0 {
                Zi = 2.0 * Zr * Zi + Ci;
                Zr = ZrN - ZiN + Cr;
                ZiN = Zi * Zi;
                ZrN = Zr * Zr;

                i = i - 1;
            }

            bits = bits.shiftLeft(1);

            if i == 0 {
                bits = bits + 1;
            }

            if x % 8 == 7 {
                bufferVar(self.bufferLen) = bits.toByte();
                self.bufferLen = self.bufferLen + 1;

                if self.bufferLen == BUFFER_SIZE {
                    write(bufferVar, 0, BUFFER_SIZE);
                    self.bufferLen = 0;
                }

                bits = 0;
            }

            x = x + 1;
        }

        if self.shift != 0 {
            bits = bits.shiftLeft(self.shift);
            bufferVar(self.bufferLen) = bits.toByte();
            self.bufferLen = self.bufferLen + 1;

            if self.bufferLen == BUFFER_SIZE {
                write(bufferVar, 0, BUFFER_SIZE);
            }
        }
    }
}

fn write(buf: Array[Byte], offset: Int, len: Int) {
    unimplemented();
}
