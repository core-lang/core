use std::argc;
use std::argv;
use std::exit;

class Node {
    payload: Option[Array[Int32]],
    birthday: Int32,
    value: Int32,
    left: Option[Node],
    right: Option[Node],
}

impl Node {
    @static fun new(payload: Option[Array[Int32]]): Node {
        Node(payload, 0i32, 0i32, None[Node], None[Node])
    }

    fun printAge(date: Int32): Unit {
        println((date - self.birthday).toString());
    }

    fun printAges(date: Int32): Unit {
        self.printAge(date);

        if self.left.isSome() {
            self.left.getOrPanic().printAges(date);
        }

        if self.right.isSome() {
            self.right.getOrPanic().printAges(date);
        }
    }

    fun printTree(date: Int32, prefix: String): Unit {
        print(prefix);
        print("age: " + (date - self.birthday).toString());
        println(" value: " + self.value.toString());

        if self.left.isSome() {
            self.left.getOrPanic().printTree(date, prefix + "  ");
        }

        if self.right.isSome() {
            self.right.getOrPanic().printTree(date, prefix + "  ");
        }
    }

    @static fun splay(tree: Option[Node], node: Node): Option[Node] {
        if tree.isNone() {
            return None;
        }
        var tree = tree.getOrPanic();

        node.left = None;
        node.right = None;

        var l: Node = node;
        var r: Node = node;

        var continue = true;
        while continue {
            if node.value
            ... < tree.value {
                if tree.left.isNone() {
                    continue = false;
                } else if node.value <= tree.left.getOrPanic().value {
                    // rotate right
                    let y = tree.left.getOrPanic();
                    tree.left = y.right;
                    y.right = Option[Node]::Some(tree);
                    tree = y;
                    if tree.left.isNone() {
                        continue = false;
                    }
                }

                if continue {
                    // link right
                    r.left = Option[Node]::Some(tree);
                    r = tree;
                    tree = tree.left.getOrPanic();
                }
            }
            ... > tree.value {
                if tree.right.isNone() {
                    continue = false;
                }
                if continue {
                    if node.value > tree.right.getOrPanic().value {
                        // rotate left
                        let y = tree.right.getOrPanic();
                        tree.right = y.left;
                        y.left = Option[Node]::Some(tree);
                        tree = y;
                        if tree.right.isNone() {
                            continue = false;
                        }
                    }
                    if continue {
                        // link left
                        l.right = Option[Node]::Some(tree);
                        l = tree;
                        tree = tree.right.getOrPanic();
                    }
                }
            }
            else { continue = false; }
        }

        l.right = tree.left;
        r.left = tree.right;
        tree.left = node.right;
        tree.right = node.left;
        Some[Node](tree)
    }

    @static fun insert(tree: Option[Node], node: Node): Node {
        if tree.isNone() {
            return node;
        }

        let tree = Node::splay(tree, node).getOrPanic();

        if node.value <= tree.value {
            node.left = tree.left;
            node.right = Some(tree);
            tree.left = None;
        } else {
            node.right = tree.right;
            node.left = Some(tree);
            tree.right = None;
        }

        return node;
    }

    @static fun trunc(date: Int32, tree: Node, depth: Int32): Unit {
        if tree.left.isSome() {
            if depth == 0i32 {
                tree.left = None;
            } else {
                Node::trunc(date, tree.left.getOrPanic(), depth-1i32);
            }
        }

        if tree.right.isSome() {
            if depth == 0i32 {
                tree.right = None;
            } else {
                Node::trunc(date, tree.right.getOrPanic(), depth-1i32);
            }
        }
    }

    @static fun countNodes(node: Option[Node]): Int32 {
        if node.isNone() {
            return 0i32;
        }
        let node = node.getOrPanic();
        return 1i32 + Node::countNodes(node.left) + Node::countNodes(node.right);
    }
}

fun main(): Unit {
    if argc() < 4i32 {
        println("usage: splunc <seed> <max-size> <iterations> <trunc-depth> [<iterations> <trunc-depth>]");
        exit(1i32);
    }

    let rnd = std::Random::new(argv(0i32).toInt64().getOrPanic());
    let max_size = argv(1i32).toInt32().getOrPanic();
    var date = 0i32;

    var tree: Node = Node::new(None[Array[Int32]]);
    tree.birthday = date;
    date = date + 1i32;
    tree.value = rnd.nextInt32WithBound(max_size);

    var j = 2i32;

    while j + 2i32 <= argc() {
        let n = argv(j).toInt32().getOrPanic();
        let depth = argv(j).toInt32().getOrPanic();

        var i = 0i32;
        while i < n {
            let value = rnd.nextInt32WithBound(4i32);

            let node = if value
            ... == 0i32 { Node::new(None[Array[Int32]]) }
            ... == 1i32 { Node::new(Some[Array[Int32]](Array[Int32]::zero(1))) }
            ... == 2i32 { Node::new(Some[Array[Int32]](Array[Int32]::zero(2))) }
            ... == 3i32 { Node::new(Some[Array[Int32]](Array[Int32]::zero(3))) }
            else        { unreachable[Node]() };

            node.birthday = date;
            date = date + 1i32;
            node.value = rnd.nextInt32WithBound(max_size);

            tree = Node::insert(Option[Node]::Some(tree), node);
            Node::trunc(date, tree, depth);

            i = i + 1i32;
        }

        j = j + 2i32;
    }
}
